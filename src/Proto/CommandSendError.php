<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandSendError
 */
class CommandSendError extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * producer_id required uint64 = 1
     *
     * @var int
     */
    protected $producer_id = null;

    /**
     * sequence_id required uint64 = 2
     *
     * @var int
     */
    protected $sequence_id = null;

    /**
     * error required enum = 3
     *
     * @var \Pulsar\Proto\ServerError
     */
    protected $error = null;

    /**
     * message required string = 4
     *
     * @var string
     */
    protected $message = null;

    /**
     * Check if 'producer_id' has a value
     *
     * @return bool
     */
    public function hasProducerId()
    {
        return $this->producer_id !== null;
    }

    /**
     * Get 'producer_id' value
     *
     * @return int
     */
    public function getProducerId()
    {
        return $this->producer_id;
    }

    /**
     * Set 'producer_id' value
     *
     * @param int $value
     */
    public function setProducerId($value)
    {
        $this->producer_id = $value;
    }

    /**
     * Check if 'sequence_id' has a value
     *
     * @return bool
     */
    public function hasSequenceId()
    {
        return $this->sequence_id !== null;
    }

    /**
     * Get 'sequence_id' value
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->sequence_id;
    }

    /**
     * Set 'sequence_id' value
     *
     * @param int $value
     */
    public function setSequenceId($value)
    {
        $this->sequence_id = $value;
    }

    /**
     * Check if 'error' has a value
     *
     * @return bool
     */
    public function hasError()
    {
        return $this->error !== null;
    }

    /**
     * Get 'error' value
     *
     * @return \Pulsar\Proto\ServerError
     */
    public function getError()
    {
        return $this->error;
    }

    /**
     * Set 'error' value
     *
     * @param \Pulsar\Proto\ServerError $value
     */
    public function setError(\Pulsar\Proto\ServerError $value)
    {
        $this->error = $value;
    }

    /**
     * Check if 'message' has a value
     *
     * @return bool
     */
    public function hasMessage()
    {
        return $this->message !== null;
    }

    /**
     * Get 'message' value
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * Set 'message' value
     *
     * @param string $value
     */
    public function setMessage($value)
    {
        $this->message = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['producer_id'])) {
            throw new \InvalidArgumentException('Field "producer_id" (tag 1) is required but has no value.');
        }

        if (!isset($values['sequence_id'])) {
            throw new \InvalidArgumentException('Field "sequence_id" (tag 2) is required but has no value.');
        }

        if (!isset($values['error'])) {
            throw new \InvalidArgumentException('Field "error" (tag 3) is required but has no value.');
        }

        if (!isset($values['message'])) {
            throw new \InvalidArgumentException('Field "message" (tag 4) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
        ], $values);

        $message->setProducerId($values['producer_id']);
        $message->setSequenceId($values['sequence_id']);
        $message->setError($values['error']);
        $message->setMessage($values['message']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandSendError',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'producer_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'sequence_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 3,
                    'name'      => 'error',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.pulsar.proto.ServerError',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name'   => 'message',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->producer_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSendError#producer_id" (tag 1) is required but has no value.');
        }

        if ($this->sequence_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSendError#sequence_id" (tag 2) is required but has no value.');
        }

        if ($this->error === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSendError#error" (tag 3) is required but has no value.');
        }

        if ($this->message === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSendError#message" (tag 4) is required but has no value.');
        }

        if ($this->producer_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->producer_id);
        }

        if ($this->sequence_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->sequence_id);
        }

        if ($this->error !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->error->value());
        }

        if ($this->message !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->message);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->producer_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->error = \Pulsar\Proto\ServerError::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->message = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->producer_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->producer_id);
        }

        if ($this->sequence_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence_id);
        }

        if ($this->error !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->error->value());
        }

        if ($this->message !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->message);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->producer_id = null;
        $this->sequence_id = null;
        $this->error = null;
        $this->message = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandSendError) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->producer_id = ( $message->producer_id !== null ) ? $message->producer_id : $this->producer_id;
        $this->sequence_id = ( $message->sequence_id !== null ) ? $message->sequence_id : $this->sequence_id;
        $this->error = ( $message->error !== null ) ? $message->error : $this->error;
        $this->message = ( $message->message !== null ) ? $message->message : $this->message;
    }


}

