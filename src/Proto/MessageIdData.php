<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.MessageIdData
 */
class MessageIdData extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * ledgerId required uint64 = 1
     *
     * @var int
     */
    protected $ledgerId = null;

    /**
     * entryId required uint64 = 2
     *
     * @var int
     */
    protected $entryId = null;

    /**
     * partition optional int32 = 3
     *
     * @var int
     */
    protected $partition = null;

    /**
     * batch_index optional int32 = 4
     *
     * @var int
     */
    protected $batch_index = null;

    /**
     * ack_set repeated int64 = 5
     *
     * @var \Protobuf\Collection
     */
    protected $ack_set = null;

    /**
     * batch_size optional int32 = 6
     *
     * @var int
     */
    protected $batch_size = null;

    /**
     * first_chunk_message_id optional message = 7
     *
     * @var \Pulsar\Proto\MessageIdData
     */
    protected $first_chunk_message_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->partition = '-1';
        $this->batch_index = '-1';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'ledgerId' has a value
     *
     * @return bool
     */
    public function hasLedgerId()
    {
        return $this->ledgerId !== null;
    }

    /**
     * Get 'ledgerId' value
     *
     * @return int
     */
    public function getLedgerId()
    {
        return $this->ledgerId;
    }

    /**
     * Set 'ledgerId' value
     *
     * @param int $value
     */
    public function setLedgerId($value)
    {
        $this->ledgerId = $value;
    }

    /**
     * Check if 'entryId' has a value
     *
     * @return bool
     */
    public function hasEntryId()
    {
        return $this->entryId !== null;
    }

    /**
     * Get 'entryId' value
     *
     * @return int
     */
    public function getEntryId()
    {
        return $this->entryId;
    }

    /**
     * Set 'entryId' value
     *
     * @param int $value
     */
    public function setEntryId($value)
    {
        $this->entryId = $value;
    }

    /**
     * Check if 'partition' has a value
     *
     * @return bool
     */
    public function hasPartition()
    {
        return $this->partition !== null;
    }

    /**
     * Get 'partition' value
     *
     * @return int
     */
    public function getPartition()
    {
        return $this->partition;
    }

    /**
     * Set 'partition' value
     *
     * @param int $value
     */
    public function setPartition($value = null)
    {
        $this->partition = $value;
    }

    /**
     * Check if 'batch_index' has a value
     *
     * @return bool
     */
    public function hasBatchIndex()
    {
        return $this->batch_index !== null;
    }

    /**
     * Get 'batch_index' value
     *
     * @return int
     */
    public function getBatchIndex()
    {
        return $this->batch_index;
    }

    /**
     * Set 'batch_index' value
     *
     * @param int $value
     */
    public function setBatchIndex($value = null)
    {
        $this->batch_index = $value;
    }

    /**
     * Check if 'ack_set' has a value
     *
     * @return bool
     */
    public function hasAckSetList()
    {
        return $this->ack_set !== null;
    }

    /**
     * Get 'ack_set' value
     *
     * @return \Protobuf\Collection
     */
    public function getAckSetList()
    {
        return $this->ack_set;
    }

    /**
     * Set 'ack_set' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setAckSetList(?\Protobuf\Collection $value = null)
    {
        $this->ack_set = $value;
    }

    /**
     * Add a new element to 'ack_set'
     *
     * @param int $value
     */
    public function addAckSet($value)
    {
        if ($this->ack_set === null) {
            $this->ack_set = new \Protobuf\ScalarCollection();
        }

        $this->ack_set->add($value);
    }

    /**
     * Check if 'batch_size' has a value
     *
     * @return bool
     */
    public function hasBatchSize()
    {
        return $this->batch_size !== null;
    }

    /**
     * Get 'batch_size' value
     *
     * @return int
     */
    public function getBatchSize()
    {
        return $this->batch_size;
    }

    /**
     * Set 'batch_size' value
     *
     * @param int $value
     */
    public function setBatchSize($value = null)
    {
        $this->batch_size = $value;
    }

    /**
     * Check if 'first_chunk_message_id' has a value
     *
     * @return bool
     */
    public function hasFirstChunkMessageId()
    {
        return $this->first_chunk_message_id !== null;
    }

    /**
     * Get 'first_chunk_message_id' value
     *
     * @return \Pulsar\Proto\MessageIdData
     */
    public function getFirstChunkMessageId()
    {
        return $this->first_chunk_message_id;
    }

    /**
     * Set 'first_chunk_message_id' value
     *
     * @param \Pulsar\Proto\MessageIdData $value
     */
    public function setFirstChunkMessageId(?\Pulsar\Proto\MessageIdData $value = null)
    {
        $this->first_chunk_message_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['ledgerId'])) {
            throw new \InvalidArgumentException('Field "ledgerId" (tag 1) is required but has no value.');
        }

        if (!isset($values['entryId'])) {
            throw new \InvalidArgumentException('Field "entryId" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'partition'              => '-1',
            'batch_index'            => '-1',
            'ack_set'                => [],
            'batch_size'             => null,
            'first_chunk_message_id' => null,
        ], $values);

        $message->setLedgerId($values['ledgerId']);
        $message->setEntryId($values['entryId']);
        $message->setPartition($values['partition']);
        $message->setBatchIndex($values['batch_index']);
        $message->setBatchSize($values['batch_size']);
        $message->setFirstChunkMessageId($values['first_chunk_message_id']);

        foreach ($values['ack_set'] as $item) {
            $message->addAckSet($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'MessageIdData',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'ledgerId',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'entryId',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 3,
                    'name'          => 'partition',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '-1',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 4,
                    'name'          => 'batch_index',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '-1',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name'   => 'ack_set',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name'   => 'batch_size',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 7,
                    'name'      => 'first_chunk_message_id',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.MessageIdData',
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->ledgerId === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\MessageIdData#ledgerId" (tag 1) is required but has no value.');
        }

        if ($this->entryId === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\MessageIdData#entryId" (tag 2) is required but has no value.');
        }

        if ($this->ledgerId !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->ledgerId);
        }

        if ($this->entryId !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->entryId);
        }

        if ($this->partition !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->partition);
        }

        if ($this->batch_index !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->batch_index);
        }

        if ($this->ack_set !== null) {
            foreach ($this->ack_set as $val) {
                $writer->writeVarint($stream, 40);
                $writer->writeVarint($stream, $val);
            }
        }

        if ($this->batch_size !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->batch_size);
        }

        if ($this->first_chunk_message_id !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->first_chunk_message_id->serializedSize($sizeContext));
            $this->first_chunk_message_id->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->ledgerId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->entryId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->partition = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->batch_index = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                if ($this->ack_set === null) {
                    $this->ack_set = new \Protobuf\ScalarCollection();
                }

                $this->ack_set->add($reader->readVarint($stream));

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->batch_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\MessageIdData();

                $this->first_chunk_message_id = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->ledgerId !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ledgerId);
        }

        if ($this->entryId !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->entryId);
        }

        if ($this->partition !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->partition);
        }

        if ($this->batch_index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->batch_index);
        }

        if ($this->ack_set !== null) {
            foreach ($this->ack_set as $val) {
                $size += 1;
                $size += $calculator->computeVarintSize($val);
            }
        }

        if ($this->batch_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->batch_size);
        }

        if ($this->first_chunk_message_id !== null) {
            $innerSize = $this->first_chunk_message_id->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->ledgerId = null;
        $this->entryId = null;
        $this->partition = '-1';
        $this->batch_index = '-1';
        $this->ack_set = null;
        $this->batch_size = null;
        $this->first_chunk_message_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\MessageIdData) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->ledgerId = ( $message->ledgerId !== null ) ? $message->ledgerId : $this->ledgerId;
        $this->entryId = ( $message->entryId !== null ) ? $message->entryId : $this->entryId;
        $this->partition = ( $message->partition !== null ) ? $message->partition : $this->partition;
        $this->batch_index = ( $message->batch_index !== null ) ? $message->batch_index : $this->batch_index;
        $this->ack_set = ( $message->ack_set !== null ) ? $message->ack_set : $this->ack_set;
        $this->batch_size = ( $message->batch_size !== null ) ? $message->batch_size : $this->batch_size;
        $this->first_chunk_message_id = ( $message->first_chunk_message_id !== null ) ? $message->first_chunk_message_id : $this->first_chunk_message_id;
    }


}

