<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandSend
 */
class CommandSend extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * producer_id required uint64 = 1
     *
     * @var int
     */
    protected $producer_id = null;

    /**
     * sequence_id required uint64 = 2
     *
     * @var int
     */
    protected $sequence_id = null;

    /**
     * num_messages optional int32 = 3
     *
     * @var int
     */
    protected $num_messages = null;

    /**
     * txnid_least_bits optional uint64 = 4
     *
     * @var int
     */
    protected $txnid_least_bits = null;

    /**
     * txnid_most_bits optional uint64 = 5
     *
     * @var int
     */
    protected $txnid_most_bits = null;

    /**
     * highest_sequence_id optional uint64 = 6
     *
     * @var int
     */
    protected $highest_sequence_id = null;

    /**
     * is_chunk optional bool = 7
     *
     * @var bool
     */
    protected $is_chunk = null;

    /**
     * marker optional bool = 8
     *
     * @var bool
     */
    protected $marker = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->num_messages = '1';
        $this->txnid_least_bits = '0';
        $this->txnid_most_bits = '0';
        $this->highest_sequence_id = '0';
        $this->is_chunk = false;
        $this->marker = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'producer_id' has a value
     *
     * @return bool
     */
    public function hasProducerId()
    {
        return $this->producer_id !== null;
    }

    /**
     * Get 'producer_id' value
     *
     * @return int
     */
    public function getProducerId()
    {
        return $this->producer_id;
    }

    /**
     * Set 'producer_id' value
     *
     * @param int $value
     */
    public function setProducerId($value)
    {
        $this->producer_id = $value;
    }

    /**
     * Check if 'sequence_id' has a value
     *
     * @return bool
     */
    public function hasSequenceId()
    {
        return $this->sequence_id !== null;
    }

    /**
     * Get 'sequence_id' value
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->sequence_id;
    }

    /**
     * Set 'sequence_id' value
     *
     * @param int $value
     */
    public function setSequenceId($value)
    {
        $this->sequence_id = $value;
    }

    /**
     * Check if 'num_messages' has a value
     *
     * @return bool
     */
    public function hasNumMessages()
    {
        return $this->num_messages !== null;
    }

    /**
     * Get 'num_messages' value
     *
     * @return int
     */
    public function getNumMessages()
    {
        return $this->num_messages;
    }

    /**
     * Set 'num_messages' value
     *
     * @param int $value
     */
    public function setNumMessages($value = null)
    {
        $this->num_messages = $value;
    }

    /**
     * Check if 'txnid_least_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidLeastBits()
    {
        return $this->txnid_least_bits !== null;
    }

    /**
     * Get 'txnid_least_bits' value
     *
     * @return int
     */
    public function getTxnidLeastBits()
    {
        return $this->txnid_least_bits;
    }

    /**
     * Set 'txnid_least_bits' value
     *
     * @param int $value
     */
    public function setTxnidLeastBits($value = null)
    {
        $this->txnid_least_bits = $value;
    }

    /**
     * Check if 'txnid_most_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidMostBits()
    {
        return $this->txnid_most_bits !== null;
    }

    /**
     * Get 'txnid_most_bits' value
     *
     * @return int
     */
    public function getTxnidMostBits()
    {
        return $this->txnid_most_bits;
    }

    /**
     * Set 'txnid_most_bits' value
     *
     * @param int $value
     */
    public function setTxnidMostBits($value = null)
    {
        $this->txnid_most_bits = $value;
    }

    /**
     * Check if 'highest_sequence_id' has a value
     *
     * @return bool
     */
    public function hasHighestSequenceId()
    {
        return $this->highest_sequence_id !== null;
    }

    /**
     * Get 'highest_sequence_id' value
     *
     * @return int
     */
    public function getHighestSequenceId()
    {
        return $this->highest_sequence_id;
    }

    /**
     * Set 'highest_sequence_id' value
     *
     * @param int $value
     */
    public function setHighestSequenceId($value = null)
    {
        $this->highest_sequence_id = $value;
    }

    /**
     * Check if 'is_chunk' has a value
     *
     * @return bool
     */
    public function hasIsChunk()
    {
        return $this->is_chunk !== null;
    }

    /**
     * Get 'is_chunk' value
     *
     * @return bool
     */
    public function getIsChunk()
    {
        return $this->is_chunk;
    }

    /**
     * Set 'is_chunk' value
     *
     * @param bool $value
     */
    public function setIsChunk($value = null)
    {
        $this->is_chunk = $value;
    }

    /**
     * Check if 'marker' has a value
     *
     * @return bool
     */
    public function hasMarker()
    {
        return $this->marker !== null;
    }

    /**
     * Get 'marker' value
     *
     * @return bool
     */
    public function getMarker()
    {
        return $this->marker;
    }

    /**
     * Set 'marker' value
     *
     * @param bool $value
     */
    public function setMarker($value = null)
    {
        $this->marker = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['producer_id'])) {
            throw new \InvalidArgumentException('Field "producer_id" (tag 1) is required but has no value.');
        }

        if (!isset($values['sequence_id'])) {
            throw new \InvalidArgumentException('Field "sequence_id" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'num_messages'        => '1',
            'txnid_least_bits'    => '0',
            'txnid_most_bits'     => '0',
            'highest_sequence_id' => '0',
            'is_chunk'            => false,
            'marker'              => false,
        ], $values);

        $message->setProducerId($values['producer_id']);
        $message->setSequenceId($values['sequence_id']);
        $message->setNumMessages($values['num_messages']);
        $message->setTxnidLeastBits($values['txnid_least_bits']);
        $message->setTxnidMostBits($values['txnid_most_bits']);
        $message->setHighestSequenceId($values['highest_sequence_id']);
        $message->setIsChunk($values['is_chunk']);
        $message->setMarker($values['marker']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandSend',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'producer_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'sequence_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 3,
                    'name'          => 'num_messages',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 4,
                    'name'          => 'txnid_least_bits',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 5,
                    'name'          => 'txnid_most_bits',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 6,
                    'name'          => 'highest_sequence_id',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 7,
                    'name'          => 'is_chunk',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 8,
                    'name'          => 'marker',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->producer_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSend#producer_id" (tag 1) is required but has no value.');
        }

        if ($this->sequence_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSend#sequence_id" (tag 2) is required but has no value.');
        }

        if ($this->producer_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->producer_id);
        }

        if ($this->sequence_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->sequence_id);
        }

        if ($this->num_messages !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->num_messages);
        }

        if ($this->txnid_least_bits !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->txnid_most_bits);
        }

        if ($this->highest_sequence_id !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->highest_sequence_id);
        }

        if ($this->is_chunk !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->is_chunk);
        }

        if ($this->marker !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->marker);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->producer_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->num_messages = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_least_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_most_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->highest_sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->is_chunk = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->marker = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->producer_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->producer_id);
        }

        if ($this->sequence_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence_id);
        }

        if ($this->num_messages !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->num_messages);
        }

        if ($this->txnid_least_bits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->txnid_most_bits);
        }

        if ($this->highest_sequence_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->highest_sequence_id);
        }

        if ($this->is_chunk !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->marker !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->producer_id = null;
        $this->sequence_id = null;
        $this->num_messages = '1';
        $this->txnid_least_bits = '0';
        $this->txnid_most_bits = '0';
        $this->highest_sequence_id = '0';
        $this->is_chunk = false;
        $this->marker = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandSend) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->producer_id = ( $message->producer_id !== null ) ? $message->producer_id : $this->producer_id;
        $this->sequence_id = ( $message->sequence_id !== null ) ? $message->sequence_id : $this->sequence_id;
        $this->num_messages = ( $message->num_messages !== null ) ? $message->num_messages : $this->num_messages;
        $this->txnid_least_bits = ( $message->txnid_least_bits !== null ) ? $message->txnid_least_bits : $this->txnid_least_bits;
        $this->txnid_most_bits = ( $message->txnid_most_bits !== null ) ? $message->txnid_most_bits : $this->txnid_most_bits;
        $this->highest_sequence_id = ( $message->highest_sequence_id !== null ) ? $message->highest_sequence_id : $this->highest_sequence_id;
        $this->is_chunk = ( $message->is_chunk !== null ) ? $message->is_chunk : $this->is_chunk;
        $this->marker = ( $message->marker !== null ) ? $message->marker : $this->marker;
    }


}

