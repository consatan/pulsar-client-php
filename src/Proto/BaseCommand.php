<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.BaseCommand
 */
class BaseCommand extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * type required enum = 1
     *
     * @var \Pulsar\Proto\BaseCommand\Type
     */
    protected $type = null;

    /**
     * connect optional message = 2
     *
     * @var \Pulsar\Proto\CommandConnect
     */
    protected $connect = null;

    /**
     * connected optional message = 3
     *
     * @var \Pulsar\Proto\CommandConnected
     */
    protected $connected = null;

    /**
     * subscribe optional message = 4
     *
     * @var \Pulsar\Proto\CommandSubscribe
     */
    protected $subscribe = null;

    /**
     * producer optional message = 5
     *
     * @var \Pulsar\Proto\CommandProducer
     */
    protected $producer = null;

    /**
     * send optional message = 6
     *
     * @var \Pulsar\Proto\CommandSend
     */
    protected $send = null;

    /**
     * send_receipt optional message = 7
     *
     * @var \Pulsar\Proto\CommandSendReceipt
     */
    protected $send_receipt = null;

    /**
     * send_error optional message = 8
     *
     * @var \Pulsar\Proto\CommandSendError
     */
    protected $send_error = null;

    /**
     * message optional message = 9
     *
     * @var \Pulsar\Proto\CommandMessage
     */
    protected $message = null;

    /**
     * ack optional message = 10
     *
     * @var \Pulsar\Proto\CommandAck
     */
    protected $ack = null;

    /**
     * flow optional message = 11
     *
     * @var \Pulsar\Proto\CommandFlow
     */
    protected $flow = null;

    /**
     * unsubscribe optional message = 12
     *
     * @var \Pulsar\Proto\CommandUnsubscribe
     */
    protected $unsubscribe = null;

    /**
     * success optional message = 13
     *
     * @var \Pulsar\Proto\CommandSuccess
     */
    protected $success = null;

    /**
     * error optional message = 14
     *
     * @var \Pulsar\Proto\CommandError
     */
    protected $error = null;

    /**
     * close_producer optional message = 15
     *
     * @var \Pulsar\Proto\CommandCloseProducer
     */
    protected $close_producer = null;

    /**
     * close_consumer optional message = 16
     *
     * @var \Pulsar\Proto\CommandCloseConsumer
     */
    protected $close_consumer = null;

    /**
     * producer_success optional message = 17
     *
     * @var \Pulsar\Proto\CommandProducerSuccess
     */
    protected $producer_success = null;

    /**
     * ping optional message = 18
     *
     * @var \Pulsar\Proto\CommandPing
     */
    protected $ping = null;

    /**
     * pong optional message = 19
     *
     * @var \Pulsar\Proto\CommandPong
     */
    protected $pong = null;

    /**
     * redeliverUnacknowledgedMessages optional message = 20
     *
     * @var \Pulsar\Proto\CommandRedeliverUnacknowledgedMessages
     */
    protected $redeliverUnacknowledgedMessages = null;

    /**
     * partitionMetadata optional message = 21
     *
     * @var \Pulsar\Proto\CommandPartitionedTopicMetadata
     */
    protected $partitionMetadata = null;

    /**
     * partitionMetadataResponse optional message = 22
     *
     * @var \Pulsar\Proto\CommandPartitionedTopicMetadataResponse
     */
    protected $partitionMetadataResponse = null;

    /**
     * lookupTopic optional message = 23
     *
     * @var \Pulsar\Proto\CommandLookupTopic
     */
    protected $lookupTopic = null;

    /**
     * lookupTopicResponse optional message = 24
     *
     * @var \Pulsar\Proto\CommandLookupTopicResponse
     */
    protected $lookupTopicResponse = null;

    /**
     * consumerStats optional message = 25
     *
     * @var \Pulsar\Proto\CommandConsumerStats
     */
    protected $consumerStats = null;

    /**
     * consumerStatsResponse optional message = 26
     *
     * @var \Pulsar\Proto\CommandConsumerStatsResponse
     */
    protected $consumerStatsResponse = null;

    /**
     * reachedEndOfTopic optional message = 27
     *
     * @var \Pulsar\Proto\CommandReachedEndOfTopic
     */
    protected $reachedEndOfTopic = null;

    /**
     * seek optional message = 28
     *
     * @var \Pulsar\Proto\CommandSeek
     */
    protected $seek = null;

    /**
     * getLastMessageId optional message = 29
     *
     * @var \Pulsar\Proto\CommandGetLastMessageId
     */
    protected $getLastMessageId = null;

    /**
     * getLastMessageIdResponse optional message = 30
     *
     * @var \Pulsar\Proto\CommandGetLastMessageIdResponse
     */
    protected $getLastMessageIdResponse = null;

    /**
     * active_consumer_change optional message = 31
     *
     * @var \Pulsar\Proto\CommandActiveConsumerChange
     */
    protected $active_consumer_change = null;

    /**
     * getTopicsOfNamespace optional message = 32
     *
     * @var \Pulsar\Proto\CommandGetTopicsOfNamespace
     */
    protected $getTopicsOfNamespace = null;

    /**
     * getTopicsOfNamespaceResponse optional message = 33
     *
     * @var \Pulsar\Proto\CommandGetTopicsOfNamespaceResponse
     */
    protected $getTopicsOfNamespaceResponse = null;

    /**
     * getSchema optional message = 34
     *
     * @var \Pulsar\Proto\CommandGetSchema
     */
    protected $getSchema = null;

    /**
     * getSchemaResponse optional message = 35
     *
     * @var \Pulsar\Proto\CommandGetSchemaResponse
     */
    protected $getSchemaResponse = null;

    /**
     * authChallenge optional message = 36
     *
     * @var \Pulsar\Proto\CommandAuthChallenge
     */
    protected $authChallenge = null;

    /**
     * authResponse optional message = 37
     *
     * @var \Pulsar\Proto\CommandAuthResponse
     */
    protected $authResponse = null;

    /**
     * ackResponse optional message = 38
     *
     * @var \Pulsar\Proto\CommandAckResponse
     */
    protected $ackResponse = null;

    /**
     * getOrCreateSchema optional message = 39
     *
     * @var \Pulsar\Proto\CommandGetOrCreateSchema
     */
    protected $getOrCreateSchema = null;

    /**
     * getOrCreateSchemaResponse optional message = 40
     *
     * @var \Pulsar\Proto\CommandGetOrCreateSchemaResponse
     */
    protected $getOrCreateSchemaResponse = null;

    /**
     * newTxn optional message = 50
     *
     * @var \Pulsar\Proto\CommandNewTxn
     */
    protected $newTxn = null;

    /**
     * newTxnResponse optional message = 51
     *
     * @var \Pulsar\Proto\CommandNewTxnResponse
     */
    protected $newTxnResponse = null;

    /**
     * addPartitionToTxn optional message = 52
     *
     * @var \Pulsar\Proto\CommandAddPartitionToTxn
     */
    protected $addPartitionToTxn = null;

    /**
     * addPartitionToTxnResponse optional message = 53
     *
     * @var \Pulsar\Proto\CommandAddPartitionToTxnResponse
     */
    protected $addPartitionToTxnResponse = null;

    /**
     * addSubscriptionToTxn optional message = 54
     *
     * @var \Pulsar\Proto\CommandAddSubscriptionToTxn
     */
    protected $addSubscriptionToTxn = null;

    /**
     * addSubscriptionToTxnResponse optional message = 55
     *
     * @var \Pulsar\Proto\CommandAddSubscriptionToTxnResponse
     */
    protected $addSubscriptionToTxnResponse = null;

    /**
     * endTxn optional message = 56
     *
     * @var \Pulsar\Proto\CommandEndTxn
     */
    protected $endTxn = null;

    /**
     * endTxnResponse optional message = 57
     *
     * @var \Pulsar\Proto\CommandEndTxnResponse
     */
    protected $endTxnResponse = null;

    /**
     * endTxnOnPartition optional message = 58
     *
     * @var \Pulsar\Proto\CommandEndTxnOnPartition
     */
    protected $endTxnOnPartition = null;

    /**
     * endTxnOnPartitionResponse optional message = 59
     *
     * @var \Pulsar\Proto\CommandEndTxnOnPartitionResponse
     */
    protected $endTxnOnPartitionResponse = null;

    /**
     * endTxnOnSubscription optional message = 60
     *
     * @var \Pulsar\Proto\CommandEndTxnOnSubscription
     */
    protected $endTxnOnSubscription = null;

    /**
     * endTxnOnSubscriptionResponse optional message = 61
     *
     * @var \Pulsar\Proto\CommandEndTxnOnSubscriptionResponse
     */
    protected $endTxnOnSubscriptionResponse = null;

    /**
     * tcClientConnectRequest optional message = 62
     *
     * @var \Pulsar\Proto\CommandTcClientConnectRequest
     */
    protected $tcClientConnectRequest = null;

    /**
     * tcClientConnectResponse optional message = 63
     *
     * @var \Pulsar\Proto\CommandTcClientConnectResponse
     */
    protected $tcClientConnectResponse = null;

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return \Pulsar\Proto\BaseCommand\Type
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param \Pulsar\Proto\BaseCommand\Type $value
     */
    public function setType(\Pulsar\Proto\BaseCommand\Type $value)
    {
        $this->type = $value;
    }

    /**
     * Check if 'connect' has a value
     *
     * @return bool
     */
    public function hasConnect()
    {
        return $this->connect !== null;
    }

    /**
     * Get 'connect' value
     *
     * @return \Pulsar\Proto\CommandConnect
     */
    public function getConnect()
    {
        return $this->connect;
    }

    /**
     * Set 'connect' value
     *
     * @param \Pulsar\Proto\CommandConnect $value
     */
    public function setConnect(?\Pulsar\Proto\CommandConnect $value = null)
    {
        $this->connect = $value;
    }

    /**
     * Check if 'connected' has a value
     *
     * @return bool
     */
    public function hasConnected()
    {
        return $this->connected !== null;
    }

    /**
     * Get 'connected' value
     *
     * @return \Pulsar\Proto\CommandConnected
     */
    public function getConnected()
    {
        return $this->connected;
    }

    /**
     * Set 'connected' value
     *
     * @param \Pulsar\Proto\CommandConnected $value
     */
    public function setConnected(?\Pulsar\Proto\CommandConnected $value = null)
    {
        $this->connected = $value;
    }

    /**
     * Check if 'subscribe' has a value
     *
     * @return bool
     */
    public function hasSubscribe()
    {
        return $this->subscribe !== null;
    }

    /**
     * Get 'subscribe' value
     *
     * @return \Pulsar\Proto\CommandSubscribe
     */
    public function getSubscribe()
    {
        return $this->subscribe;
    }

    /**
     * Set 'subscribe' value
     *
     * @param \Pulsar\Proto\CommandSubscribe $value
     */
    public function setSubscribe(?\Pulsar\Proto\CommandSubscribe $value = null)
    {
        $this->subscribe = $value;
    }

    /**
     * Check if 'producer' has a value
     *
     * @return bool
     */
    public function hasProducer()
    {
        return $this->producer !== null;
    }

    /**
     * Get 'producer' value
     *
     * @return \Pulsar\Proto\CommandProducer
     */
    public function getProducer()
    {
        return $this->producer;
    }

    /**
     * Set 'producer' value
     *
     * @param \Pulsar\Proto\CommandProducer $value
     */
    public function setProducer(?\Pulsar\Proto\CommandProducer $value = null)
    {
        $this->producer = $value;
    }

    /**
     * Check if 'send' has a value
     *
     * @return bool
     */
    public function hasSend()
    {
        return $this->send !== null;
    }

    /**
     * Get 'send' value
     *
     * @return \Pulsar\Proto\CommandSend
     */
    public function getSend()
    {
        return $this->send;
    }

    /**
     * Set 'send' value
     *
     * @param \Pulsar\Proto\CommandSend $value
     */
    public function setSend(?\Pulsar\Proto\CommandSend $value = null)
    {
        $this->send = $value;
    }

    /**
     * Check if 'send_receipt' has a value
     *
     * @return bool
     */
    public function hasSendReceipt()
    {
        return $this->send_receipt !== null;
    }

    /**
     * Get 'send_receipt' value
     *
     * @return \Pulsar\Proto\CommandSendReceipt
     */
    public function getSendReceipt()
    {
        return $this->send_receipt;
    }

    /**
     * Set 'send_receipt' value
     *
     * @param \Pulsar\Proto\CommandSendReceipt $value
     */
    public function setSendReceipt(?\Pulsar\Proto\CommandSendReceipt $value = null)
    {
        $this->send_receipt = $value;
    }

    /**
     * Check if 'send_error' has a value
     *
     * @return bool
     */
    public function hasSendError()
    {
        return $this->send_error !== null;
    }

    /**
     * Get 'send_error' value
     *
     * @return \Pulsar\Proto\CommandSendError
     */
    public function getSendError()
    {
        return $this->send_error;
    }

    /**
     * Set 'send_error' value
     *
     * @param \Pulsar\Proto\CommandSendError $value
     */
    public function setSendError(?\Pulsar\Proto\CommandSendError $value = null)
    {
        $this->send_error = $value;
    }

    /**
     * Check if 'message' has a value
     *
     * @return bool
     */
    public function hasMessage()
    {
        return $this->message !== null;
    }

    /**
     * Get 'message' value
     *
     * @return \Pulsar\Proto\CommandMessage
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * Set 'message' value
     *
     * @param \Pulsar\Proto\CommandMessage $value
     */
    public function setMessage(?\Pulsar\Proto\CommandMessage $value = null)
    {
        $this->message = $value;
    }

    /**
     * Check if 'ack' has a value
     *
     * @return bool
     */
    public function hasAck()
    {
        return $this->ack !== null;
    }

    /**
     * Get 'ack' value
     *
     * @return \Pulsar\Proto\CommandAck
     */
    public function getAck()
    {
        return $this->ack;
    }

    /**
     * Set 'ack' value
     *
     * @param \Pulsar\Proto\CommandAck $value
     */
    public function setAck(?\Pulsar\Proto\CommandAck $value = null)
    {
        $this->ack = $value;
    }

    /**
     * Check if 'flow' has a value
     *
     * @return bool
     */
    public function hasFlow()
    {
        return $this->flow !== null;
    }

    /**
     * Get 'flow' value
     *
     * @return \Pulsar\Proto\CommandFlow
     */
    public function getFlow()
    {
        return $this->flow;
    }

    /**
     * Set 'flow' value
     *
     * @param \Pulsar\Proto\CommandFlow $value
     */
    public function setFlow(?\Pulsar\Proto\CommandFlow $value = null)
    {
        $this->flow = $value;
    }

    /**
     * Check if 'unsubscribe' has a value
     *
     * @return bool
     */
    public function hasUnsubscribe()
    {
        return $this->unsubscribe !== null;
    }

    /**
     * Get 'unsubscribe' value
     *
     * @return \Pulsar\Proto\CommandUnsubscribe
     */
    public function getUnsubscribe()
    {
        return $this->unsubscribe;
    }

    /**
     * Set 'unsubscribe' value
     *
     * @param \Pulsar\Proto\CommandUnsubscribe $value
     */
    public function setUnsubscribe(?\Pulsar\Proto\CommandUnsubscribe $value = null)
    {
        $this->unsubscribe = $value;
    }

    /**
     * Check if 'success' has a value
     *
     * @return bool
     */
    public function hasSuccess()
    {
        return $this->success !== null;
    }

    /**
     * Get 'success' value
     *
     * @return \Pulsar\Proto\CommandSuccess
     */
    public function getSuccess()
    {
        return $this->success;
    }

    /**
     * Set 'success' value
     *
     * @param \Pulsar\Proto\CommandSuccess $value
     */
    public function setSuccess(?\Pulsar\Proto\CommandSuccess $value = null)
    {
        $this->success = $value;
    }

    /**
     * Check if 'error' has a value
     *
     * @return bool
     */
    public function hasError()
    {
        return $this->error !== null;
    }

    /**
     * Get 'error' value
     *
     * @return \Pulsar\Proto\CommandError
     */
    public function getError()
    {
        return $this->error;
    }

    /**
     * Set 'error' value
     *
     * @param \Pulsar\Proto\CommandError $value
     */
    public function setError(?\Pulsar\Proto\CommandError $value = null)
    {
        $this->error = $value;
    }

    /**
     * Check if 'close_producer' has a value
     *
     * @return bool
     */
    public function hasCloseProducer()
    {
        return $this->close_producer !== null;
    }

    /**
     * Get 'close_producer' value
     *
     * @return \Pulsar\Proto\CommandCloseProducer
     */
    public function getCloseProducer()
    {
        return $this->close_producer;
    }

    /**
     * Set 'close_producer' value
     *
     * @param \Pulsar\Proto\CommandCloseProducer $value
     */
    public function setCloseProducer(?\Pulsar\Proto\CommandCloseProducer $value = null)
    {
        $this->close_producer = $value;
    }

    /**
     * Check if 'close_consumer' has a value
     *
     * @return bool
     */
    public function hasCloseConsumer()
    {
        return $this->close_consumer !== null;
    }

    /**
     * Get 'close_consumer' value
     *
     * @return \Pulsar\Proto\CommandCloseConsumer
     */
    public function getCloseConsumer()
    {
        return $this->close_consumer;
    }

    /**
     * Set 'close_consumer' value
     *
     * @param \Pulsar\Proto\CommandCloseConsumer $value
     */
    public function setCloseConsumer(?\Pulsar\Proto\CommandCloseConsumer $value = null)
    {
        $this->close_consumer = $value;
    }

    /**
     * Check if 'producer_success' has a value
     *
     * @return bool
     */
    public function hasProducerSuccess()
    {
        return $this->producer_success !== null;
    }

    /**
     * Get 'producer_success' value
     *
     * @return \Pulsar\Proto\CommandProducerSuccess
     */
    public function getProducerSuccess()
    {
        return $this->producer_success;
    }

    /**
     * Set 'producer_success' value
     *
     * @param \Pulsar\Proto\CommandProducerSuccess $value
     */
    public function setProducerSuccess(?\Pulsar\Proto\CommandProducerSuccess $value = null)
    {
        $this->producer_success = $value;
    }

    /**
     * Check if 'ping' has a value
     *
     * @return bool
     */
    public function hasPing()
    {
        return $this->ping !== null;
    }

    /**
     * Get 'ping' value
     *
     * @return \Pulsar\Proto\CommandPing
     */
    public function getPing()
    {
        return $this->ping;
    }

    /**
     * Set 'ping' value
     *
     * @param \Pulsar\Proto\CommandPing $value
     */
    public function setPing(?\Pulsar\Proto\CommandPing $value = null)
    {
        $this->ping = $value;
    }

    /**
     * Check if 'pong' has a value
     *
     * @return bool
     */
    public function hasPong()
    {
        return $this->pong !== null;
    }

    /**
     * Get 'pong' value
     *
     * @return \Pulsar\Proto\CommandPong
     */
    public function getPong()
    {
        return $this->pong;
    }

    /**
     * Set 'pong' value
     *
     * @param \Pulsar\Proto\CommandPong $value
     */
    public function setPong(?\Pulsar\Proto\CommandPong $value = null)
    {
        $this->pong = $value;
    }

    /**
     * Check if 'redeliverUnacknowledgedMessages' has a value
     *
     * @return bool
     */
    public function hasRedeliverUnacknowledgedMessages()
    {
        return $this->redeliverUnacknowledgedMessages !== null;
    }

    /**
     * Get 'redeliverUnacknowledgedMessages' value
     *
     * @return \Pulsar\Proto\CommandRedeliverUnacknowledgedMessages
     */
    public function getRedeliverUnacknowledgedMessages()
    {
        return $this->redeliverUnacknowledgedMessages;
    }

    /**
     * Set 'redeliverUnacknowledgedMessages' value
     *
     * @param \Pulsar\Proto\CommandRedeliverUnacknowledgedMessages $value
     */
    public function setRedeliverUnacknowledgedMessages(?\Pulsar\Proto\CommandRedeliverUnacknowledgedMessages $value = null)
    {
        $this->redeliverUnacknowledgedMessages = $value;
    }

    /**
     * Check if 'partitionMetadata' has a value
     *
     * @return bool
     */
    public function hasPartitionMetadata()
    {
        return $this->partitionMetadata !== null;
    }

    /**
     * Get 'partitionMetadata' value
     *
     * @return \Pulsar\Proto\CommandPartitionedTopicMetadata
     */
    public function getPartitionMetadata()
    {
        return $this->partitionMetadata;
    }

    /**
     * Set 'partitionMetadata' value
     *
     * @param \Pulsar\Proto\CommandPartitionedTopicMetadata $value
     */
    public function setPartitionMetadata(?\Pulsar\Proto\CommandPartitionedTopicMetadata $value = null)
    {
        $this->partitionMetadata = $value;
    }

    /**
     * Check if 'partitionMetadataResponse' has a value
     *
     * @return bool
     */
    public function hasPartitionMetadataResponse()
    {
        return $this->partitionMetadataResponse !== null;
    }

    /**
     * Get 'partitionMetadataResponse' value
     *
     * @return \Pulsar\Proto\CommandPartitionedTopicMetadataResponse
     */
    public function getPartitionMetadataResponse()
    {
        return $this->partitionMetadataResponse;
    }

    /**
     * Set 'partitionMetadataResponse' value
     *
     * @param \Pulsar\Proto\CommandPartitionedTopicMetadataResponse $value
     */
    public function setPartitionMetadataResponse(?\Pulsar\Proto\CommandPartitionedTopicMetadataResponse $value = null)
    {
        $this->partitionMetadataResponse = $value;
    }

    /**
     * Check if 'lookupTopic' has a value
     *
     * @return bool
     */
    public function hasLookupTopic()
    {
        return $this->lookupTopic !== null;
    }

    /**
     * Get 'lookupTopic' value
     *
     * @return \Pulsar\Proto\CommandLookupTopic
     */
    public function getLookupTopic()
    {
        return $this->lookupTopic;
    }

    /**
     * Set 'lookupTopic' value
     *
     * @param \Pulsar\Proto\CommandLookupTopic $value
     */
    public function setLookupTopic(?\Pulsar\Proto\CommandLookupTopic $value = null)
    {
        $this->lookupTopic = $value;
    }

    /**
     * Check if 'lookupTopicResponse' has a value
     *
     * @return bool
     */
    public function hasLookupTopicResponse()
    {
        return $this->lookupTopicResponse !== null;
    }

    /**
     * Get 'lookupTopicResponse' value
     *
     * @return \Pulsar\Proto\CommandLookupTopicResponse
     */
    public function getLookupTopicResponse()
    {
        return $this->lookupTopicResponse;
    }

    /**
     * Set 'lookupTopicResponse' value
     *
     * @param \Pulsar\Proto\CommandLookupTopicResponse $value
     */
    public function setLookupTopicResponse(?\Pulsar\Proto\CommandLookupTopicResponse $value = null)
    {
        $this->lookupTopicResponse = $value;
    }

    /**
     * Check if 'consumerStats' has a value
     *
     * @return bool
     */
    public function hasConsumerStats()
    {
        return $this->consumerStats !== null;
    }

    /**
     * Get 'consumerStats' value
     *
     * @return \Pulsar\Proto\CommandConsumerStats
     */
    public function getConsumerStats()
    {
        return $this->consumerStats;
    }

    /**
     * Set 'consumerStats' value
     *
     * @param \Pulsar\Proto\CommandConsumerStats $value
     */
    public function setConsumerStats(?\Pulsar\Proto\CommandConsumerStats $value = null)
    {
        $this->consumerStats = $value;
    }

    /**
     * Check if 'consumerStatsResponse' has a value
     *
     * @return bool
     */
    public function hasConsumerStatsResponse()
    {
        return $this->consumerStatsResponse !== null;
    }

    /**
     * Get 'consumerStatsResponse' value
     *
     * @return \Pulsar\Proto\CommandConsumerStatsResponse
     */
    public function getConsumerStatsResponse()
    {
        return $this->consumerStatsResponse;
    }

    /**
     * Set 'consumerStatsResponse' value
     *
     * @param \Pulsar\Proto\CommandConsumerStatsResponse $value
     */
    public function setConsumerStatsResponse(?\Pulsar\Proto\CommandConsumerStatsResponse $value = null)
    {
        $this->consumerStatsResponse = $value;
    }

    /**
     * Check if 'reachedEndOfTopic' has a value
     *
     * @return bool
     */
    public function hasReachedEndOfTopic()
    {
        return $this->reachedEndOfTopic !== null;
    }

    /**
     * Get 'reachedEndOfTopic' value
     *
     * @return \Pulsar\Proto\CommandReachedEndOfTopic
     */
    public function getReachedEndOfTopic()
    {
        return $this->reachedEndOfTopic;
    }

    /**
     * Set 'reachedEndOfTopic' value
     *
     * @param \Pulsar\Proto\CommandReachedEndOfTopic $value
     */
    public function setReachedEndOfTopic(?\Pulsar\Proto\CommandReachedEndOfTopic $value = null)
    {
        $this->reachedEndOfTopic = $value;
    }

    /**
     * Check if 'seek' has a value
     *
     * @return bool
     */
    public function hasSeek()
    {
        return $this->seek !== null;
    }

    /**
     * Get 'seek' value
     *
     * @return \Pulsar\Proto\CommandSeek
     */
    public function getSeek()
    {
        return $this->seek;
    }

    /**
     * Set 'seek' value
     *
     * @param \Pulsar\Proto\CommandSeek $value
     */
    public function setSeek(?\Pulsar\Proto\CommandSeek $value = null)
    {
        $this->seek = $value;
    }

    /**
     * Check if 'getLastMessageId' has a value
     *
     * @return bool
     */
    public function hasGetLastMessageId()
    {
        return $this->getLastMessageId !== null;
    }

    /**
     * Get 'getLastMessageId' value
     *
     * @return \Pulsar\Proto\CommandGetLastMessageId
     */
    public function getGetLastMessageId()
    {
        return $this->getLastMessageId;
    }

    /**
     * Set 'getLastMessageId' value
     *
     * @param \Pulsar\Proto\CommandGetLastMessageId $value
     */
    public function setGetLastMessageId(?\Pulsar\Proto\CommandGetLastMessageId $value = null)
    {
        $this->getLastMessageId = $value;
    }

    /**
     * Check if 'getLastMessageIdResponse' has a value
     *
     * @return bool
     */
    public function hasGetLastMessageIdResponse()
    {
        return $this->getLastMessageIdResponse !== null;
    }

    /**
     * Get 'getLastMessageIdResponse' value
     *
     * @return \Pulsar\Proto\CommandGetLastMessageIdResponse
     */
    public function getGetLastMessageIdResponse()
    {
        return $this->getLastMessageIdResponse;
    }

    /**
     * Set 'getLastMessageIdResponse' value
     *
     * @param \Pulsar\Proto\CommandGetLastMessageIdResponse $value
     */
    public function setGetLastMessageIdResponse(?\Pulsar\Proto\CommandGetLastMessageIdResponse $value = null)
    {
        $this->getLastMessageIdResponse = $value;
    }

    /**
     * Check if 'active_consumer_change' has a value
     *
     * @return bool
     */
    public function hasActiveConsumerChange()
    {
        return $this->active_consumer_change !== null;
    }

    /**
     * Get 'active_consumer_change' value
     *
     * @return \Pulsar\Proto\CommandActiveConsumerChange
     */
    public function getActiveConsumerChange()
    {
        return $this->active_consumer_change;
    }

    /**
     * Set 'active_consumer_change' value
     *
     * @param \Pulsar\Proto\CommandActiveConsumerChange $value
     */
    public function setActiveConsumerChange(?\Pulsar\Proto\CommandActiveConsumerChange $value = null)
    {
        $this->active_consumer_change = $value;
    }

    /**
     * Check if 'getTopicsOfNamespace' has a value
     *
     * @return bool
     */
    public function hasGetTopicsOfNamespace()
    {
        return $this->getTopicsOfNamespace !== null;
    }

    /**
     * Get 'getTopicsOfNamespace' value
     *
     * @return \Pulsar\Proto\CommandGetTopicsOfNamespace
     */
    public function getGetTopicsOfNamespace()
    {
        return $this->getTopicsOfNamespace;
    }

    /**
     * Set 'getTopicsOfNamespace' value
     *
     * @param \Pulsar\Proto\CommandGetTopicsOfNamespace $value
     */
    public function setGetTopicsOfNamespace(?\Pulsar\Proto\CommandGetTopicsOfNamespace $value = null)
    {
        $this->getTopicsOfNamespace = $value;
    }

    /**
     * Check if 'getTopicsOfNamespaceResponse' has a value
     *
     * @return bool
     */
    public function hasGetTopicsOfNamespaceResponse()
    {
        return $this->getTopicsOfNamespaceResponse !== null;
    }

    /**
     * Get 'getTopicsOfNamespaceResponse' value
     *
     * @return \Pulsar\Proto\CommandGetTopicsOfNamespaceResponse
     */
    public function getGetTopicsOfNamespaceResponse()
    {
        return $this->getTopicsOfNamespaceResponse;
    }

    /**
     * Set 'getTopicsOfNamespaceResponse' value
     *
     * @param \Pulsar\Proto\CommandGetTopicsOfNamespaceResponse $value
     */
    public function setGetTopicsOfNamespaceResponse(?\Pulsar\Proto\CommandGetTopicsOfNamespaceResponse $value = null)
    {
        $this->getTopicsOfNamespaceResponse = $value;
    }

    /**
     * Check if 'getSchema' has a value
     *
     * @return bool
     */
    public function hasGetSchema()
    {
        return $this->getSchema !== null;
    }

    /**
     * Get 'getSchema' value
     *
     * @return \Pulsar\Proto\CommandGetSchema
     */
    public function getGetSchema()
    {
        return $this->getSchema;
    }

    /**
     * Set 'getSchema' value
     *
     * @param \Pulsar\Proto\CommandGetSchema $value
     */
    public function setGetSchema(?\Pulsar\Proto\CommandGetSchema $value = null)
    {
        $this->getSchema = $value;
    }

    /**
     * Check if 'getSchemaResponse' has a value
     *
     * @return bool
     */
    public function hasGetSchemaResponse()
    {
        return $this->getSchemaResponse !== null;
    }

    /**
     * Get 'getSchemaResponse' value
     *
     * @return \Pulsar\Proto\CommandGetSchemaResponse
     */
    public function getGetSchemaResponse()
    {
        return $this->getSchemaResponse;
    }

    /**
     * Set 'getSchemaResponse' value
     *
     * @param \Pulsar\Proto\CommandGetSchemaResponse $value
     */
    public function setGetSchemaResponse(?\Pulsar\Proto\CommandGetSchemaResponse $value = null)
    {
        $this->getSchemaResponse = $value;
    }

    /**
     * Check if 'authChallenge' has a value
     *
     * @return bool
     */
    public function hasAuthChallenge()
    {
        return $this->authChallenge !== null;
    }

    /**
     * Get 'authChallenge' value
     *
     * @return \Pulsar\Proto\CommandAuthChallenge
     */
    public function getAuthChallenge()
    {
        return $this->authChallenge;
    }

    /**
     * Set 'authChallenge' value
     *
     * @param \Pulsar\Proto\CommandAuthChallenge $value
     */
    public function setAuthChallenge(?\Pulsar\Proto\CommandAuthChallenge $value = null)
    {
        $this->authChallenge = $value;
    }

    /**
     * Check if 'authResponse' has a value
     *
     * @return bool
     */
    public function hasAuthResponse()
    {
        return $this->authResponse !== null;
    }

    /**
     * Get 'authResponse' value
     *
     * @return \Pulsar\Proto\CommandAuthResponse
     */
    public function getAuthResponse()
    {
        return $this->authResponse;
    }

    /**
     * Set 'authResponse' value
     *
     * @param \Pulsar\Proto\CommandAuthResponse $value
     */
    public function setAuthResponse(?\Pulsar\Proto\CommandAuthResponse $value = null)
    {
        $this->authResponse = $value;
    }

    /**
     * Check if 'ackResponse' has a value
     *
     * @return bool
     */
    public function hasAckResponse()
    {
        return $this->ackResponse !== null;
    }

    /**
     * Get 'ackResponse' value
     *
     * @return \Pulsar\Proto\CommandAckResponse
     */
    public function getAckResponse()
    {
        return $this->ackResponse;
    }

    /**
     * Set 'ackResponse' value
     *
     * @param \Pulsar\Proto\CommandAckResponse $value
     */
    public function setAckResponse(?\Pulsar\Proto\CommandAckResponse $value = null)
    {
        $this->ackResponse = $value;
    }

    /**
     * Check if 'getOrCreateSchema' has a value
     *
     * @return bool
     */
    public function hasGetOrCreateSchema()
    {
        return $this->getOrCreateSchema !== null;
    }

    /**
     * Get 'getOrCreateSchema' value
     *
     * @return \Pulsar\Proto\CommandGetOrCreateSchema
     */
    public function getGetOrCreateSchema()
    {
        return $this->getOrCreateSchema;
    }

    /**
     * Set 'getOrCreateSchema' value
     *
     * @param \Pulsar\Proto\CommandGetOrCreateSchema $value
     */
    public function setGetOrCreateSchema(?\Pulsar\Proto\CommandGetOrCreateSchema $value = null)
    {
        $this->getOrCreateSchema = $value;
    }

    /**
     * Check if 'getOrCreateSchemaResponse' has a value
     *
     * @return bool
     */
    public function hasGetOrCreateSchemaResponse()
    {
        return $this->getOrCreateSchemaResponse !== null;
    }

    /**
     * Get 'getOrCreateSchemaResponse' value
     *
     * @return \Pulsar\Proto\CommandGetOrCreateSchemaResponse
     */
    public function getGetOrCreateSchemaResponse()
    {
        return $this->getOrCreateSchemaResponse;
    }

    /**
     * Set 'getOrCreateSchemaResponse' value
     *
     * @param \Pulsar\Proto\CommandGetOrCreateSchemaResponse $value
     */
    public function setGetOrCreateSchemaResponse(?\Pulsar\Proto\CommandGetOrCreateSchemaResponse $value = null)
    {
        $this->getOrCreateSchemaResponse = $value;
    }

    /**
     * Check if 'newTxn' has a value
     *
     * @return bool
     */
    public function hasNewTxn()
    {
        return $this->newTxn !== null;
    }

    /**
     * Get 'newTxn' value
     *
     * @return \Pulsar\Proto\CommandNewTxn
     */
    public function getNewTxn()
    {
        return $this->newTxn;
    }

    /**
     * Set 'newTxn' value
     *
     * @param \Pulsar\Proto\CommandNewTxn $value
     */
    public function setNewTxn(?\Pulsar\Proto\CommandNewTxn $value = null)
    {
        $this->newTxn = $value;
    }

    /**
     * Check if 'newTxnResponse' has a value
     *
     * @return bool
     */
    public function hasNewTxnResponse()
    {
        return $this->newTxnResponse !== null;
    }

    /**
     * Get 'newTxnResponse' value
     *
     * @return \Pulsar\Proto\CommandNewTxnResponse
     */
    public function getNewTxnResponse()
    {
        return $this->newTxnResponse;
    }

    /**
     * Set 'newTxnResponse' value
     *
     * @param \Pulsar\Proto\CommandNewTxnResponse $value
     */
    public function setNewTxnResponse(?\Pulsar\Proto\CommandNewTxnResponse $value = null)
    {
        $this->newTxnResponse = $value;
    }

    /**
     * Check if 'addPartitionToTxn' has a value
     *
     * @return bool
     */
    public function hasAddPartitionToTxn()
    {
        return $this->addPartitionToTxn !== null;
    }

    /**
     * Get 'addPartitionToTxn' value
     *
     * @return \Pulsar\Proto\CommandAddPartitionToTxn
     */
    public function getAddPartitionToTxn()
    {
        return $this->addPartitionToTxn;
    }

    /**
     * Set 'addPartitionToTxn' value
     *
     * @param \Pulsar\Proto\CommandAddPartitionToTxn $value
     */
    public function setAddPartitionToTxn(?\Pulsar\Proto\CommandAddPartitionToTxn $value = null)
    {
        $this->addPartitionToTxn = $value;
    }

    /**
     * Check if 'addPartitionToTxnResponse' has a value
     *
     * @return bool
     */
    public function hasAddPartitionToTxnResponse()
    {
        return $this->addPartitionToTxnResponse !== null;
    }

    /**
     * Get 'addPartitionToTxnResponse' value
     *
     * @return \Pulsar\Proto\CommandAddPartitionToTxnResponse
     */
    public function getAddPartitionToTxnResponse()
    {
        return $this->addPartitionToTxnResponse;
    }

    /**
     * Set 'addPartitionToTxnResponse' value
     *
     * @param \Pulsar\Proto\CommandAddPartitionToTxnResponse $value
     */
    public function setAddPartitionToTxnResponse(?\Pulsar\Proto\CommandAddPartitionToTxnResponse $value = null)
    {
        $this->addPartitionToTxnResponse = $value;
    }

    /**
     * Check if 'addSubscriptionToTxn' has a value
     *
     * @return bool
     */
    public function hasAddSubscriptionToTxn()
    {
        return $this->addSubscriptionToTxn !== null;
    }

    /**
     * Get 'addSubscriptionToTxn' value
     *
     * @return \Pulsar\Proto\CommandAddSubscriptionToTxn
     */
    public function getAddSubscriptionToTxn()
    {
        return $this->addSubscriptionToTxn;
    }

    /**
     * Set 'addSubscriptionToTxn' value
     *
     * @param \Pulsar\Proto\CommandAddSubscriptionToTxn $value
     */
    public function setAddSubscriptionToTxn(?\Pulsar\Proto\CommandAddSubscriptionToTxn $value = null)
    {
        $this->addSubscriptionToTxn = $value;
    }

    /**
     * Check if 'addSubscriptionToTxnResponse' has a value
     *
     * @return bool
     */
    public function hasAddSubscriptionToTxnResponse()
    {
        return $this->addSubscriptionToTxnResponse !== null;
    }

    /**
     * Get 'addSubscriptionToTxnResponse' value
     *
     * @return \Pulsar\Proto\CommandAddSubscriptionToTxnResponse
     */
    public function getAddSubscriptionToTxnResponse()
    {
        return $this->addSubscriptionToTxnResponse;
    }

    /**
     * Set 'addSubscriptionToTxnResponse' value
     *
     * @param \Pulsar\Proto\CommandAddSubscriptionToTxnResponse $value
     */
    public function setAddSubscriptionToTxnResponse(?\Pulsar\Proto\CommandAddSubscriptionToTxnResponse $value = null)
    {
        $this->addSubscriptionToTxnResponse = $value;
    }

    /**
     * Check if 'endTxn' has a value
     *
     * @return bool
     */
    public function hasEndTxn()
    {
        return $this->endTxn !== null;
    }

    /**
     * Get 'endTxn' value
     *
     * @return \Pulsar\Proto\CommandEndTxn
     */
    public function getEndTxn()
    {
        return $this->endTxn;
    }

    /**
     * Set 'endTxn' value
     *
     * @param \Pulsar\Proto\CommandEndTxn $value
     */
    public function setEndTxn(?\Pulsar\Proto\CommandEndTxn $value = null)
    {
        $this->endTxn = $value;
    }

    /**
     * Check if 'endTxnResponse' has a value
     *
     * @return bool
     */
    public function hasEndTxnResponse()
    {
        return $this->endTxnResponse !== null;
    }

    /**
     * Get 'endTxnResponse' value
     *
     * @return \Pulsar\Proto\CommandEndTxnResponse
     */
    public function getEndTxnResponse()
    {
        return $this->endTxnResponse;
    }

    /**
     * Set 'endTxnResponse' value
     *
     * @param \Pulsar\Proto\CommandEndTxnResponse $value
     */
    public function setEndTxnResponse(?\Pulsar\Proto\CommandEndTxnResponse $value = null)
    {
        $this->endTxnResponse = $value;
    }

    /**
     * Check if 'endTxnOnPartition' has a value
     *
     * @return bool
     */
    public function hasEndTxnOnPartition()
    {
        return $this->endTxnOnPartition !== null;
    }

    /**
     * Get 'endTxnOnPartition' value
     *
     * @return \Pulsar\Proto\CommandEndTxnOnPartition
     */
    public function getEndTxnOnPartition()
    {
        return $this->endTxnOnPartition;
    }

    /**
     * Set 'endTxnOnPartition' value
     *
     * @param \Pulsar\Proto\CommandEndTxnOnPartition $value
     */
    public function setEndTxnOnPartition(?\Pulsar\Proto\CommandEndTxnOnPartition $value = null)
    {
        $this->endTxnOnPartition = $value;
    }

    /**
     * Check if 'endTxnOnPartitionResponse' has a value
     *
     * @return bool
     */
    public function hasEndTxnOnPartitionResponse()
    {
        return $this->endTxnOnPartitionResponse !== null;
    }

    /**
     * Get 'endTxnOnPartitionResponse' value
     *
     * @return \Pulsar\Proto\CommandEndTxnOnPartitionResponse
     */
    public function getEndTxnOnPartitionResponse()
    {
        return $this->endTxnOnPartitionResponse;
    }

    /**
     * Set 'endTxnOnPartitionResponse' value
     *
     * @param \Pulsar\Proto\CommandEndTxnOnPartitionResponse $value
     */
    public function setEndTxnOnPartitionResponse(?\Pulsar\Proto\CommandEndTxnOnPartitionResponse $value = null)
    {
        $this->endTxnOnPartitionResponse = $value;
    }

    /**
     * Check if 'endTxnOnSubscription' has a value
     *
     * @return bool
     */
    public function hasEndTxnOnSubscription()
    {
        return $this->endTxnOnSubscription !== null;
    }

    /**
     * Get 'endTxnOnSubscription' value
     *
     * @return \Pulsar\Proto\CommandEndTxnOnSubscription
     */
    public function getEndTxnOnSubscription()
    {
        return $this->endTxnOnSubscription;
    }

    /**
     * Set 'endTxnOnSubscription' value
     *
     * @param \Pulsar\Proto\CommandEndTxnOnSubscription $value
     */
    public function setEndTxnOnSubscription(?\Pulsar\Proto\CommandEndTxnOnSubscription $value = null)
    {
        $this->endTxnOnSubscription = $value;
    }

    /**
     * Check if 'endTxnOnSubscriptionResponse' has a value
     *
     * @return bool
     */
    public function hasEndTxnOnSubscriptionResponse()
    {
        return $this->endTxnOnSubscriptionResponse !== null;
    }

    /**
     * Get 'endTxnOnSubscriptionResponse' value
     *
     * @return \Pulsar\Proto\CommandEndTxnOnSubscriptionResponse
     */
    public function getEndTxnOnSubscriptionResponse()
    {
        return $this->endTxnOnSubscriptionResponse;
    }

    /**
     * Set 'endTxnOnSubscriptionResponse' value
     *
     * @param \Pulsar\Proto\CommandEndTxnOnSubscriptionResponse $value
     */
    public function setEndTxnOnSubscriptionResponse(?\Pulsar\Proto\CommandEndTxnOnSubscriptionResponse $value = null)
    {
        $this->endTxnOnSubscriptionResponse = $value;
    }

    /**
     * Check if 'tcClientConnectRequest' has a value
     *
     * @return bool
     */
    public function hasTcClientConnectRequest()
    {
        return $this->tcClientConnectRequest !== null;
    }

    /**
     * Get 'tcClientConnectRequest' value
     *
     * @return \Pulsar\Proto\CommandTcClientConnectRequest
     */
    public function getTcClientConnectRequest()
    {
        return $this->tcClientConnectRequest;
    }

    /**
     * Set 'tcClientConnectRequest' value
     *
     * @param \Pulsar\Proto\CommandTcClientConnectRequest $value
     */
    public function setTcClientConnectRequest(?\Pulsar\Proto\CommandTcClientConnectRequest $value = null)
    {
        $this->tcClientConnectRequest = $value;
    }

    /**
     * Check if 'tcClientConnectResponse' has a value
     *
     * @return bool
     */
    public function hasTcClientConnectResponse()
    {
        return $this->tcClientConnectResponse !== null;
    }

    /**
     * Get 'tcClientConnectResponse' value
     *
     * @return \Pulsar\Proto\CommandTcClientConnectResponse
     */
    public function getTcClientConnectResponse()
    {
        return $this->tcClientConnectResponse;
    }

    /**
     * Set 'tcClientConnectResponse' value
     *
     * @param \Pulsar\Proto\CommandTcClientConnectResponse $value
     */
    public function setTcClientConnectResponse(?\Pulsar\Proto\CommandTcClientConnectResponse $value = null)
    {
        $this->tcClientConnectResponse = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['type'])) {
            throw new \InvalidArgumentException('Field "type" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'connect'                         => null,
            'connected'                       => null,
            'subscribe'                       => null,
            'producer'                        => null,
            'send'                            => null,
            'send_receipt'                    => null,
            'send_error'                      => null,
            'message'                         => null,
            'ack'                             => null,
            'flow'                            => null,
            'unsubscribe'                     => null,
            'success'                         => null,
            'error'                           => null,
            'close_producer'                  => null,
            'close_consumer'                  => null,
            'producer_success'                => null,
            'ping'                            => null,
            'pong'                            => null,
            'redeliverUnacknowledgedMessages' => null,
            'partitionMetadata'               => null,
            'partitionMetadataResponse'       => null,
            'lookupTopic'                     => null,
            'lookupTopicResponse'             => null,
            'consumerStats'                   => null,
            'consumerStatsResponse'           => null,
            'reachedEndOfTopic'               => null,
            'seek'                            => null,
            'getLastMessageId'                => null,
            'getLastMessageIdResponse'        => null,
            'active_consumer_change'          => null,
            'getTopicsOfNamespace'            => null,
            'getTopicsOfNamespaceResponse'    => null,
            'getSchema'                       => null,
            'getSchemaResponse'               => null,
            'authChallenge'                   => null,
            'authResponse'                    => null,
            'ackResponse'                     => null,
            'getOrCreateSchema'               => null,
            'getOrCreateSchemaResponse'       => null,
            'newTxn'                          => null,
            'newTxnResponse'                  => null,
            'addPartitionToTxn'               => null,
            'addPartitionToTxnResponse'       => null,
            'addSubscriptionToTxn'            => null,
            'addSubscriptionToTxnResponse'    => null,
            'endTxn'                          => null,
            'endTxnResponse'                  => null,
            'endTxnOnPartition'               => null,
            'endTxnOnPartitionResponse'       => null,
            'endTxnOnSubscription'            => null,
            'endTxnOnSubscriptionResponse'    => null,
            'tcClientConnectRequest'          => null,
            'tcClientConnectResponse'         => null,
        ], $values);

        $message->setType($values['type']);
        $message->setConnect($values['connect']);
        $message->setConnected($values['connected']);
        $message->setSubscribe($values['subscribe']);
        $message->setProducer($values['producer']);
        $message->setSend($values['send']);
        $message->setSendReceipt($values['send_receipt']);
        $message->setSendError($values['send_error']);
        $message->setMessage($values['message']);
        $message->setAck($values['ack']);
        $message->setFlow($values['flow']);
        $message->setUnsubscribe($values['unsubscribe']);
        $message->setSuccess($values['success']);
        $message->setError($values['error']);
        $message->setCloseProducer($values['close_producer']);
        $message->setCloseConsumer($values['close_consumer']);
        $message->setProducerSuccess($values['producer_success']);
        $message->setPing($values['ping']);
        $message->setPong($values['pong']);
        $message->setRedeliverUnacknowledgedMessages($values['redeliverUnacknowledgedMessages']);
        $message->setPartitionMetadata($values['partitionMetadata']);
        $message->setPartitionMetadataResponse($values['partitionMetadataResponse']);
        $message->setLookupTopic($values['lookupTopic']);
        $message->setLookupTopicResponse($values['lookupTopicResponse']);
        $message->setConsumerStats($values['consumerStats']);
        $message->setConsumerStatsResponse($values['consumerStatsResponse']);
        $message->setReachedEndOfTopic($values['reachedEndOfTopic']);
        $message->setSeek($values['seek']);
        $message->setGetLastMessageId($values['getLastMessageId']);
        $message->setGetLastMessageIdResponse($values['getLastMessageIdResponse']);
        $message->setActiveConsumerChange($values['active_consumer_change']);
        $message->setGetTopicsOfNamespace($values['getTopicsOfNamespace']);
        $message->setGetTopicsOfNamespaceResponse($values['getTopicsOfNamespaceResponse']);
        $message->setGetSchema($values['getSchema']);
        $message->setGetSchemaResponse($values['getSchemaResponse']);
        $message->setAuthChallenge($values['authChallenge']);
        $message->setAuthResponse($values['authResponse']);
        $message->setAckResponse($values['ackResponse']);
        $message->setGetOrCreateSchema($values['getOrCreateSchema']);
        $message->setGetOrCreateSchemaResponse($values['getOrCreateSchemaResponse']);
        $message->setNewTxn($values['newTxn']);
        $message->setNewTxnResponse($values['newTxnResponse']);
        $message->setAddPartitionToTxn($values['addPartitionToTxn']);
        $message->setAddPartitionToTxnResponse($values['addPartitionToTxnResponse']);
        $message->setAddSubscriptionToTxn($values['addSubscriptionToTxn']);
        $message->setAddSubscriptionToTxnResponse($values['addSubscriptionToTxnResponse']);
        $message->setEndTxn($values['endTxn']);
        $message->setEndTxnResponse($values['endTxnResponse']);
        $message->setEndTxnOnPartition($values['endTxnOnPartition']);
        $message->setEndTxnOnPartitionResponse($values['endTxnOnPartitionResponse']);
        $message->setEndTxnOnSubscription($values['endTxnOnSubscription']);
        $message->setEndTxnOnSubscriptionResponse($values['endTxnOnSubscriptionResponse']);
        $message->setTcClientConnectRequest($values['tcClientConnectRequest']);
        $message->setTcClientConnectResponse($values['tcClientConnectResponse']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'BaseCommand',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 1,
                    'name'      => 'type',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.pulsar.proto.BaseCommand.Type',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 2,
                    'name'      => 'connect',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandConnect',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 3,
                    'name'      => 'connected',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandConnected',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 4,
                    'name'      => 'subscribe',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSubscribe',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 5,
                    'name'      => 'producer',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandProducer',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 6,
                    'name'      => 'send',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSend',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 7,
                    'name'      => 'send_receipt',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSendReceipt',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 8,
                    'name'      => 'send_error',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSendError',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 9,
                    'name'      => 'message',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandMessage',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 10,
                    'name'      => 'ack',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAck',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 11,
                    'name'      => 'flow',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandFlow',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 12,
                    'name'      => 'unsubscribe',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandUnsubscribe',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 13,
                    'name'      => 'success',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSuccess',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 14,
                    'name'      => 'error',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandError',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 15,
                    'name'      => 'close_producer',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandCloseProducer',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 16,
                    'name'      => 'close_consumer',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandCloseConsumer',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 17,
                    'name'      => 'producer_success',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandProducerSuccess',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 18,
                    'name'      => 'ping',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandPing',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 19,
                    'name'      => 'pong',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandPong',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 20,
                    'name'      => 'redeliverUnacknowledgedMessages',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandRedeliverUnacknowledgedMessages',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 21,
                    'name'      => 'partitionMetadata',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandPartitionedTopicMetadata',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 22,
                    'name'      => 'partitionMetadataResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandPartitionedTopicMetadataResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 23,
                    'name'      => 'lookupTopic',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandLookupTopic',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 24,
                    'name'      => 'lookupTopicResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandLookupTopicResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 25,
                    'name'      => 'consumerStats',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandConsumerStats',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 26,
                    'name'      => 'consumerStatsResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandConsumerStatsResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 27,
                    'name'      => 'reachedEndOfTopic',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandReachedEndOfTopic',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 28,
                    'name'      => 'seek',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandSeek',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 29,
                    'name'      => 'getLastMessageId',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetLastMessageId',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 30,
                    'name'      => 'getLastMessageIdResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetLastMessageIdResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 31,
                    'name'      => 'active_consumer_change',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandActiveConsumerChange',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 32,
                    'name'      => 'getTopicsOfNamespace',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetTopicsOfNamespace',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 33,
                    'name'      => 'getTopicsOfNamespaceResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetTopicsOfNamespaceResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 34,
                    'name'      => 'getSchema',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetSchema',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 35,
                    'name'      => 'getSchemaResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetSchemaResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 36,
                    'name'      => 'authChallenge',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAuthChallenge',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 37,
                    'name'      => 'authResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAuthResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 38,
                    'name'      => 'ackResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAckResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 39,
                    'name'      => 'getOrCreateSchema',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetOrCreateSchema',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 40,
                    'name'      => 'getOrCreateSchemaResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandGetOrCreateSchemaResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 50,
                    'name'      => 'newTxn',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandNewTxn',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 51,
                    'name'      => 'newTxnResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandNewTxnResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 52,
                    'name'      => 'addPartitionToTxn',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAddPartitionToTxn',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 53,
                    'name'      => 'addPartitionToTxnResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAddPartitionToTxnResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 54,
                    'name'      => 'addSubscriptionToTxn',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAddSubscriptionToTxn',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 55,
                    'name'      => 'addSubscriptionToTxnResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAddSubscriptionToTxnResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 56,
                    'name'      => 'endTxn',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxn',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 57,
                    'name'      => 'endTxnResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxnResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 58,
                    'name'      => 'endTxnOnPartition',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxnOnPartition',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 59,
                    'name'      => 'endTxnOnPartitionResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxnOnPartitionResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 60,
                    'name'      => 'endTxnOnSubscription',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxnOnSubscription',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 61,
                    'name'      => 'endTxnOnSubscriptionResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandEndTxnOnSubscriptionResponse',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 62,
                    'name'      => 'tcClientConnectRequest',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandTcClientConnectRequest',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 63,
                    'name'      => 'tcClientConnectResponse',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandTcClientConnectResponse',
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->type === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\BaseCommand#type" (tag 1) is required but has no value.');
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->type->value());
        }

        if ($this->connect !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeVarint($stream, $this->connect->serializedSize($sizeContext));
            $this->connect->writeTo($context);
        }

        if ($this->connected !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeVarint($stream, $this->connected->serializedSize($sizeContext));
            $this->connected->writeTo($context);
        }

        if ($this->subscribe !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeVarint($stream, $this->subscribe->serializedSize($sizeContext));
            $this->subscribe->writeTo($context);
        }

        if ($this->producer !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeVarint($stream, $this->producer->serializedSize($sizeContext));
            $this->producer->writeTo($context);
        }

        if ($this->send !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->send->serializedSize($sizeContext));
            $this->send->writeTo($context);
        }

        if ($this->send_receipt !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->send_receipt->serializedSize($sizeContext));
            $this->send_receipt->writeTo($context);
        }

        if ($this->send_error !== null) {
            $writer->writeVarint($stream, 66);
            $writer->writeVarint($stream, $this->send_error->serializedSize($sizeContext));
            $this->send_error->writeTo($context);
        }

        if ($this->message !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->message->serializedSize($sizeContext));
            $this->message->writeTo($context);
        }

        if ($this->ack !== null) {
            $writer->writeVarint($stream, 82);
            $writer->writeVarint($stream, $this->ack->serializedSize($sizeContext));
            $this->ack->writeTo($context);
        }

        if ($this->flow !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeVarint($stream, $this->flow->serializedSize($sizeContext));
            $this->flow->writeTo($context);
        }

        if ($this->unsubscribe !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->unsubscribe->serializedSize($sizeContext));
            $this->unsubscribe->writeTo($context);
        }

        if ($this->success !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeVarint($stream, $this->success->serializedSize($sizeContext));
            $this->success->writeTo($context);
        }

        if ($this->error !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeVarint($stream, $this->error->serializedSize($sizeContext));
            $this->error->writeTo($context);
        }

        if ($this->close_producer !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeVarint($stream, $this->close_producer->serializedSize($sizeContext));
            $this->close_producer->writeTo($context);
        }

        if ($this->close_consumer !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeVarint($stream, $this->close_consumer->serializedSize($sizeContext));
            $this->close_consumer->writeTo($context);
        }

        if ($this->producer_success !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->producer_success->serializedSize($sizeContext));
            $this->producer_success->writeTo($context);
        }

        if ($this->ping !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeVarint($stream, $this->ping->serializedSize($sizeContext));
            $this->ping->writeTo($context);
        }

        if ($this->pong !== null) {
            $writer->writeVarint($stream, 154);
            $writer->writeVarint($stream, $this->pong->serializedSize($sizeContext));
            $this->pong->writeTo($context);
        }

        if ($this->redeliverUnacknowledgedMessages !== null) {
            $writer->writeVarint($stream, 162);
            $writer->writeVarint($stream, $this->redeliverUnacknowledgedMessages->serializedSize($sizeContext));
            $this->redeliverUnacknowledgedMessages->writeTo($context);
        }

        if ($this->partitionMetadata !== null) {
            $writer->writeVarint($stream, 170);
            $writer->writeVarint($stream, $this->partitionMetadata->serializedSize($sizeContext));
            $this->partitionMetadata->writeTo($context);
        }

        if ($this->partitionMetadataResponse !== null) {
            $writer->writeVarint($stream, 178);
            $writer->writeVarint($stream, $this->partitionMetadataResponse->serializedSize($sizeContext));
            $this->partitionMetadataResponse->writeTo($context);
        }

        if ($this->lookupTopic !== null) {
            $writer->writeVarint($stream, 186);
            $writer->writeVarint($stream, $this->lookupTopic->serializedSize($sizeContext));
            $this->lookupTopic->writeTo($context);
        }

        if ($this->lookupTopicResponse !== null) {
            $writer->writeVarint($stream, 194);
            $writer->writeVarint($stream, $this->lookupTopicResponse->serializedSize($sizeContext));
            $this->lookupTopicResponse->writeTo($context);
        }

        if ($this->consumerStats !== null) {
            $writer->writeVarint($stream, 202);
            $writer->writeVarint($stream, $this->consumerStats->serializedSize($sizeContext));
            $this->consumerStats->writeTo($context);
        }

        if ($this->consumerStatsResponse !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeVarint($stream, $this->consumerStatsResponse->serializedSize($sizeContext));
            $this->consumerStatsResponse->writeTo($context);
        }

        if ($this->reachedEndOfTopic !== null) {
            $writer->writeVarint($stream, 218);
            $writer->writeVarint($stream, $this->reachedEndOfTopic->serializedSize($sizeContext));
            $this->reachedEndOfTopic->writeTo($context);
        }

        if ($this->seek !== null) {
            $writer->writeVarint($stream, 226);
            $writer->writeVarint($stream, $this->seek->serializedSize($sizeContext));
            $this->seek->writeTo($context);
        }

        if ($this->getLastMessageId !== null) {
            $writer->writeVarint($stream, 234);
            $writer->writeVarint($stream, $this->getLastMessageId->serializedSize($sizeContext));
            $this->getLastMessageId->writeTo($context);
        }

        if ($this->getLastMessageIdResponse !== null) {
            $writer->writeVarint($stream, 242);
            $writer->writeVarint($stream, $this->getLastMessageIdResponse->serializedSize($sizeContext));
            $this->getLastMessageIdResponse->writeTo($context);
        }

        if ($this->active_consumer_change !== null) {
            $writer->writeVarint($stream, 250);
            $writer->writeVarint($stream, $this->active_consumer_change->serializedSize($sizeContext));
            $this->active_consumer_change->writeTo($context);
        }

        if ($this->getTopicsOfNamespace !== null) {
            $writer->writeVarint($stream, 258);
            $writer->writeVarint($stream, $this->getTopicsOfNamespace->serializedSize($sizeContext));
            $this->getTopicsOfNamespace->writeTo($context);
        }

        if ($this->getTopicsOfNamespaceResponse !== null) {
            $writer->writeVarint($stream, 266);
            $writer->writeVarint($stream, $this->getTopicsOfNamespaceResponse->serializedSize($sizeContext));
            $this->getTopicsOfNamespaceResponse->writeTo($context);
        }

        if ($this->getSchema !== null) {
            $writer->writeVarint($stream, 274);
            $writer->writeVarint($stream, $this->getSchema->serializedSize($sizeContext));
            $this->getSchema->writeTo($context);
        }

        if ($this->getSchemaResponse !== null) {
            $writer->writeVarint($stream, 282);
            $writer->writeVarint($stream, $this->getSchemaResponse->serializedSize($sizeContext));
            $this->getSchemaResponse->writeTo($context);
        }

        if ($this->authChallenge !== null) {
            $writer->writeVarint($stream, 290);
            $writer->writeVarint($stream, $this->authChallenge->serializedSize($sizeContext));
            $this->authChallenge->writeTo($context);
        }

        if ($this->authResponse !== null) {
            $writer->writeVarint($stream, 298);
            $writer->writeVarint($stream, $this->authResponse->serializedSize($sizeContext));
            $this->authResponse->writeTo($context);
        }

        if ($this->ackResponse !== null) {
            $writer->writeVarint($stream, 306);
            $writer->writeVarint($stream, $this->ackResponse->serializedSize($sizeContext));
            $this->ackResponse->writeTo($context);
        }

        if ($this->getOrCreateSchema !== null) {
            $writer->writeVarint($stream, 314);
            $writer->writeVarint($stream, $this->getOrCreateSchema->serializedSize($sizeContext));
            $this->getOrCreateSchema->writeTo($context);
        }

        if ($this->getOrCreateSchemaResponse !== null) {
            $writer->writeVarint($stream, 322);
            $writer->writeVarint($stream, $this->getOrCreateSchemaResponse->serializedSize($sizeContext));
            $this->getOrCreateSchemaResponse->writeTo($context);
        }

        if ($this->newTxn !== null) {
            $writer->writeVarint($stream, 402);
            $writer->writeVarint($stream, $this->newTxn->serializedSize($sizeContext));
            $this->newTxn->writeTo($context);
        }

        if ($this->newTxnResponse !== null) {
            $writer->writeVarint($stream, 410);
            $writer->writeVarint($stream, $this->newTxnResponse->serializedSize($sizeContext));
            $this->newTxnResponse->writeTo($context);
        }

        if ($this->addPartitionToTxn !== null) {
            $writer->writeVarint($stream, 418);
            $writer->writeVarint($stream, $this->addPartitionToTxn->serializedSize($sizeContext));
            $this->addPartitionToTxn->writeTo($context);
        }

        if ($this->addPartitionToTxnResponse !== null) {
            $writer->writeVarint($stream, 426);
            $writer->writeVarint($stream, $this->addPartitionToTxnResponse->serializedSize($sizeContext));
            $this->addPartitionToTxnResponse->writeTo($context);
        }

        if ($this->addSubscriptionToTxn !== null) {
            $writer->writeVarint($stream, 434);
            $writer->writeVarint($stream, $this->addSubscriptionToTxn->serializedSize($sizeContext));
            $this->addSubscriptionToTxn->writeTo($context);
        }

        if ($this->addSubscriptionToTxnResponse !== null) {
            $writer->writeVarint($stream, 442);
            $writer->writeVarint($stream, $this->addSubscriptionToTxnResponse->serializedSize($sizeContext));
            $this->addSubscriptionToTxnResponse->writeTo($context);
        }

        if ($this->endTxn !== null) {
            $writer->writeVarint($stream, 450);
            $writer->writeVarint($stream, $this->endTxn->serializedSize($sizeContext));
            $this->endTxn->writeTo($context);
        }

        if ($this->endTxnResponse !== null) {
            $writer->writeVarint($stream, 458);
            $writer->writeVarint($stream, $this->endTxnResponse->serializedSize($sizeContext));
            $this->endTxnResponse->writeTo($context);
        }

        if ($this->endTxnOnPartition !== null) {
            $writer->writeVarint($stream, 466);
            $writer->writeVarint($stream, $this->endTxnOnPartition->serializedSize($sizeContext));
            $this->endTxnOnPartition->writeTo($context);
        }

        if ($this->endTxnOnPartitionResponse !== null) {
            $writer->writeVarint($stream, 474);
            $writer->writeVarint($stream, $this->endTxnOnPartitionResponse->serializedSize($sizeContext));
            $this->endTxnOnPartitionResponse->writeTo($context);
        }

        if ($this->endTxnOnSubscription !== null) {
            $writer->writeVarint($stream, 482);
            $writer->writeVarint($stream, $this->endTxnOnSubscription->serializedSize($sizeContext));
            $this->endTxnOnSubscription->writeTo($context);
        }

        if ($this->endTxnOnSubscriptionResponse !== null) {
            $writer->writeVarint($stream, 490);
            $writer->writeVarint($stream, $this->endTxnOnSubscriptionResponse->serializedSize($sizeContext));
            $this->endTxnOnSubscriptionResponse->writeTo($context);
        }

        if ($this->tcClientConnectRequest !== null) {
            $writer->writeVarint($stream, 498);
            $writer->writeVarint($stream, $this->tcClientConnectRequest->serializedSize($sizeContext));
            $this->tcClientConnectRequest->writeTo($context);
        }

        if ($this->tcClientConnectResponse !== null) {
            $writer->writeVarint($stream, 506);
            $writer->writeVarint($stream, $this->tcClientConnectResponse->serializedSize($sizeContext));
            $this->tcClientConnectResponse->writeTo($context);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->type = \Pulsar\Proto\BaseCommand\Type::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandConnect();

                $this->connect = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandConnected();

                $this->connected = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSubscribe();

                $this->subscribe = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandProducer();

                $this->producer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSend();

                $this->send = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSendReceipt();

                $this->send_receipt = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSendError();

                $this->send_error = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandMessage();

                $this->message = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAck();

                $this->ack = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandFlow();

                $this->flow = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandUnsubscribe();

                $this->unsubscribe = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSuccess();

                $this->success = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandError();

                $this->error = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandCloseProducer();

                $this->close_producer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandCloseConsumer();

                $this->close_consumer = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandProducerSuccess();

                $this->producer_success = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandPing();

                $this->ping = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandPong();

                $this->pong = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandRedeliverUnacknowledgedMessages();

                $this->redeliverUnacknowledgedMessages = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 21) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandPartitionedTopicMetadata();

                $this->partitionMetadata = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandPartitionedTopicMetadataResponse();

                $this->partitionMetadataResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandLookupTopic();

                $this->lookupTopic = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandLookupTopicResponse();

                $this->lookupTopicResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandConsumerStats();

                $this->consumerStats = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandConsumerStatsResponse();

                $this->consumerStatsResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandReachedEndOfTopic();

                $this->reachedEndOfTopic = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandSeek();

                $this->seek = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetLastMessageId();

                $this->getLastMessageId = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetLastMessageIdResponse();

                $this->getLastMessageIdResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 31) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandActiveConsumerChange();

                $this->active_consumer_change = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 32) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetTopicsOfNamespace();

                $this->getTopicsOfNamespace = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 33) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetTopicsOfNamespaceResponse();

                $this->getTopicsOfNamespaceResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 34) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetSchema();

                $this->getSchema = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 35) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetSchemaResponse();

                $this->getSchemaResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 36) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAuthChallenge();

                $this->authChallenge = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 37) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAuthResponse();

                $this->authResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 38) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAckResponse();

                $this->ackResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 39) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetOrCreateSchema();

                $this->getOrCreateSchema = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 40) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandGetOrCreateSchemaResponse();

                $this->getOrCreateSchemaResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 50) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandNewTxn();

                $this->newTxn = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 51) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandNewTxnResponse();

                $this->newTxnResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 52) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAddPartitionToTxn();

                $this->addPartitionToTxn = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 53) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAddPartitionToTxnResponse();

                $this->addPartitionToTxnResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 54) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAddSubscriptionToTxn();

                $this->addSubscriptionToTxn = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 55) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandAddSubscriptionToTxnResponse();

                $this->addSubscriptionToTxnResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 56) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxn();

                $this->endTxn = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 57) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxnResponse();

                $this->endTxnResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 58) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxnOnPartition();

                $this->endTxnOnPartition = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 59) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxnOnPartitionResponse();

                $this->endTxnOnPartitionResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 60) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxnOnSubscription();

                $this->endTxnOnSubscription = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 61) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandEndTxnOnSubscriptionResponse();

                $this->endTxnOnSubscriptionResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 62) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandTcClientConnectRequest();

                $this->tcClientConnectRequest = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 63) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\CommandTcClientConnectResponse();

                $this->tcClientConnectResponse = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->type->value());
        }

        if ($this->connect !== null) {
            $innerSize = $this->connect->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->connected !== null) {
            $innerSize = $this->connected->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->subscribe !== null) {
            $innerSize = $this->subscribe->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->producer !== null) {
            $innerSize = $this->producer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->send !== null) {
            $innerSize = $this->send->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->send_receipt !== null) {
            $innerSize = $this->send_receipt->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->send_error !== null) {
            $innerSize = $this->send_error->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->message !== null) {
            $innerSize = $this->message->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ack !== null) {
            $innerSize = $this->ack->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->flow !== null) {
            $innerSize = $this->flow->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->unsubscribe !== null) {
            $innerSize = $this->unsubscribe->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->success !== null) {
            $innerSize = $this->success->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->error !== null) {
            $innerSize = $this->error->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->close_producer !== null) {
            $innerSize = $this->close_producer->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->close_consumer !== null) {
            $innerSize = $this->close_consumer->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->producer_success !== null) {
            $innerSize = $this->producer_success->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ping !== null) {
            $innerSize = $this->ping->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->pong !== null) {
            $innerSize = $this->pong->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->redeliverUnacknowledgedMessages !== null) {
            $innerSize = $this->redeliverUnacknowledgedMessages->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->partitionMetadata !== null) {
            $innerSize = $this->partitionMetadata->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->partitionMetadataResponse !== null) {
            $innerSize = $this->partitionMetadataResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->lookupTopic !== null) {
            $innerSize = $this->lookupTopic->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->lookupTopicResponse !== null) {
            $innerSize = $this->lookupTopicResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->consumerStats !== null) {
            $innerSize = $this->consumerStats->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->consumerStatsResponse !== null) {
            $innerSize = $this->consumerStatsResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->reachedEndOfTopic !== null) {
            $innerSize = $this->reachedEndOfTopic->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->seek !== null) {
            $innerSize = $this->seek->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getLastMessageId !== null) {
            $innerSize = $this->getLastMessageId->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getLastMessageIdResponse !== null) {
            $innerSize = $this->getLastMessageIdResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->active_consumer_change !== null) {
            $innerSize = $this->active_consumer_change->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getTopicsOfNamespace !== null) {
            $innerSize = $this->getTopicsOfNamespace->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getTopicsOfNamespaceResponse !== null) {
            $innerSize = $this->getTopicsOfNamespaceResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getSchema !== null) {
            $innerSize = $this->getSchema->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getSchemaResponse !== null) {
            $innerSize = $this->getSchemaResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->authChallenge !== null) {
            $innerSize = $this->authChallenge->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->authResponse !== null) {
            $innerSize = $this->authResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->ackResponse !== null) {
            $innerSize = $this->ackResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getOrCreateSchema !== null) {
            $innerSize = $this->getOrCreateSchema->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->getOrCreateSchemaResponse !== null) {
            $innerSize = $this->getOrCreateSchemaResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->newTxn !== null) {
            $innerSize = $this->newTxn->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->newTxnResponse !== null) {
            $innerSize = $this->newTxnResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->addPartitionToTxn !== null) {
            $innerSize = $this->addPartitionToTxn->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->addPartitionToTxnResponse !== null) {
            $innerSize = $this->addPartitionToTxnResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->addSubscriptionToTxn !== null) {
            $innerSize = $this->addSubscriptionToTxn->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->addSubscriptionToTxnResponse !== null) {
            $innerSize = $this->addSubscriptionToTxnResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxn !== null) {
            $innerSize = $this->endTxn->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxnResponse !== null) {
            $innerSize = $this->endTxnResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxnOnPartition !== null) {
            $innerSize = $this->endTxnOnPartition->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxnOnPartitionResponse !== null) {
            $innerSize = $this->endTxnOnPartitionResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxnOnSubscription !== null) {
            $innerSize = $this->endTxnOnSubscription->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->endTxnOnSubscriptionResponse !== null) {
            $innerSize = $this->endTxnOnSubscriptionResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->tcClientConnectRequest !== null) {
            $innerSize = $this->tcClientConnectRequest->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->tcClientConnectResponse !== null) {
            $innerSize = $this->tcClientConnectResponse->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->type = null;
        $this->connect = null;
        $this->connected = null;
        $this->subscribe = null;
        $this->producer = null;
        $this->send = null;
        $this->send_receipt = null;
        $this->send_error = null;
        $this->message = null;
        $this->ack = null;
        $this->flow = null;
        $this->unsubscribe = null;
        $this->success = null;
        $this->error = null;
        $this->close_producer = null;
        $this->close_consumer = null;
        $this->producer_success = null;
        $this->ping = null;
        $this->pong = null;
        $this->redeliverUnacknowledgedMessages = null;
        $this->partitionMetadata = null;
        $this->partitionMetadataResponse = null;
        $this->lookupTopic = null;
        $this->lookupTopicResponse = null;
        $this->consumerStats = null;
        $this->consumerStatsResponse = null;
        $this->reachedEndOfTopic = null;
        $this->seek = null;
        $this->getLastMessageId = null;
        $this->getLastMessageIdResponse = null;
        $this->active_consumer_change = null;
        $this->getTopicsOfNamespace = null;
        $this->getTopicsOfNamespaceResponse = null;
        $this->getSchema = null;
        $this->getSchemaResponse = null;
        $this->authChallenge = null;
        $this->authResponse = null;
        $this->ackResponse = null;
        $this->getOrCreateSchema = null;
        $this->getOrCreateSchemaResponse = null;
        $this->newTxn = null;
        $this->newTxnResponse = null;
        $this->addPartitionToTxn = null;
        $this->addPartitionToTxnResponse = null;
        $this->addSubscriptionToTxn = null;
        $this->addSubscriptionToTxnResponse = null;
        $this->endTxn = null;
        $this->endTxnResponse = null;
        $this->endTxnOnPartition = null;
        $this->endTxnOnPartitionResponse = null;
        $this->endTxnOnSubscription = null;
        $this->endTxnOnSubscriptionResponse = null;
        $this->tcClientConnectRequest = null;
        $this->tcClientConnectResponse = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\BaseCommand) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->type = ( $message->type !== null ) ? $message->type : $this->type;
        $this->connect = ( $message->connect !== null ) ? $message->connect : $this->connect;
        $this->connected = ( $message->connected !== null ) ? $message->connected : $this->connected;
        $this->subscribe = ( $message->subscribe !== null ) ? $message->subscribe : $this->subscribe;
        $this->producer = ( $message->producer !== null ) ? $message->producer : $this->producer;
        $this->send = ( $message->send !== null ) ? $message->send : $this->send;
        $this->send_receipt = ( $message->send_receipt !== null ) ? $message->send_receipt : $this->send_receipt;
        $this->send_error = ( $message->send_error !== null ) ? $message->send_error : $this->send_error;
        $this->message = ( $message->message !== null ) ? $message->message : $this->message;
        $this->ack = ( $message->ack !== null ) ? $message->ack : $this->ack;
        $this->flow = ( $message->flow !== null ) ? $message->flow : $this->flow;
        $this->unsubscribe = ( $message->unsubscribe !== null ) ? $message->unsubscribe : $this->unsubscribe;
        $this->success = ( $message->success !== null ) ? $message->success : $this->success;
        $this->error = ( $message->error !== null ) ? $message->error : $this->error;
        $this->close_producer = ( $message->close_producer !== null ) ? $message->close_producer : $this->close_producer;
        $this->close_consumer = ( $message->close_consumer !== null ) ? $message->close_consumer : $this->close_consumer;
        $this->producer_success = ( $message->producer_success !== null ) ? $message->producer_success : $this->producer_success;
        $this->ping = ( $message->ping !== null ) ? $message->ping : $this->ping;
        $this->pong = ( $message->pong !== null ) ? $message->pong : $this->pong;
        $this->redeliverUnacknowledgedMessages = ( $message->redeliverUnacknowledgedMessages !== null ) ? $message->redeliverUnacknowledgedMessages : $this->redeliverUnacknowledgedMessages;
        $this->partitionMetadata = ( $message->partitionMetadata !== null ) ? $message->partitionMetadata : $this->partitionMetadata;
        $this->partitionMetadataResponse = ( $message->partitionMetadataResponse !== null ) ? $message->partitionMetadataResponse : $this->partitionMetadataResponse;
        $this->lookupTopic = ( $message->lookupTopic !== null ) ? $message->lookupTopic : $this->lookupTopic;
        $this->lookupTopicResponse = ( $message->lookupTopicResponse !== null ) ? $message->lookupTopicResponse : $this->lookupTopicResponse;
        $this->consumerStats = ( $message->consumerStats !== null ) ? $message->consumerStats : $this->consumerStats;
        $this->consumerStatsResponse = ( $message->consumerStatsResponse !== null ) ? $message->consumerStatsResponse : $this->consumerStatsResponse;
        $this->reachedEndOfTopic = ( $message->reachedEndOfTopic !== null ) ? $message->reachedEndOfTopic : $this->reachedEndOfTopic;
        $this->seek = ( $message->seek !== null ) ? $message->seek : $this->seek;
        $this->getLastMessageId = ( $message->getLastMessageId !== null ) ? $message->getLastMessageId : $this->getLastMessageId;
        $this->getLastMessageIdResponse = ( $message->getLastMessageIdResponse !== null ) ? $message->getLastMessageIdResponse : $this->getLastMessageIdResponse;
        $this->active_consumer_change = ( $message->active_consumer_change !== null ) ? $message->active_consumer_change : $this->active_consumer_change;
        $this->getTopicsOfNamespace = ( $message->getTopicsOfNamespace !== null ) ? $message->getTopicsOfNamespace : $this->getTopicsOfNamespace;
        $this->getTopicsOfNamespaceResponse = ( $message->getTopicsOfNamespaceResponse !== null ) ? $message->getTopicsOfNamespaceResponse : $this->getTopicsOfNamespaceResponse;
        $this->getSchema = ( $message->getSchema !== null ) ? $message->getSchema : $this->getSchema;
        $this->getSchemaResponse = ( $message->getSchemaResponse !== null ) ? $message->getSchemaResponse : $this->getSchemaResponse;
        $this->authChallenge = ( $message->authChallenge !== null ) ? $message->authChallenge : $this->authChallenge;
        $this->authResponse = ( $message->authResponse !== null ) ? $message->authResponse : $this->authResponse;
        $this->ackResponse = ( $message->ackResponse !== null ) ? $message->ackResponse : $this->ackResponse;
        $this->getOrCreateSchema = ( $message->getOrCreateSchema !== null ) ? $message->getOrCreateSchema : $this->getOrCreateSchema;
        $this->getOrCreateSchemaResponse = ( $message->getOrCreateSchemaResponse !== null ) ? $message->getOrCreateSchemaResponse : $this->getOrCreateSchemaResponse;
        $this->newTxn = ( $message->newTxn !== null ) ? $message->newTxn : $this->newTxn;
        $this->newTxnResponse = ( $message->newTxnResponse !== null ) ? $message->newTxnResponse : $this->newTxnResponse;
        $this->addPartitionToTxn = ( $message->addPartitionToTxn !== null ) ? $message->addPartitionToTxn : $this->addPartitionToTxn;
        $this->addPartitionToTxnResponse = ( $message->addPartitionToTxnResponse !== null ) ? $message->addPartitionToTxnResponse : $this->addPartitionToTxnResponse;
        $this->addSubscriptionToTxn = ( $message->addSubscriptionToTxn !== null ) ? $message->addSubscriptionToTxn : $this->addSubscriptionToTxn;
        $this->addSubscriptionToTxnResponse = ( $message->addSubscriptionToTxnResponse !== null ) ? $message->addSubscriptionToTxnResponse : $this->addSubscriptionToTxnResponse;
        $this->endTxn = ( $message->endTxn !== null ) ? $message->endTxn : $this->endTxn;
        $this->endTxnResponse = ( $message->endTxnResponse !== null ) ? $message->endTxnResponse : $this->endTxnResponse;
        $this->endTxnOnPartition = ( $message->endTxnOnPartition !== null ) ? $message->endTxnOnPartition : $this->endTxnOnPartition;
        $this->endTxnOnPartitionResponse = ( $message->endTxnOnPartitionResponse !== null ) ? $message->endTxnOnPartitionResponse : $this->endTxnOnPartitionResponse;
        $this->endTxnOnSubscription = ( $message->endTxnOnSubscription !== null ) ? $message->endTxnOnSubscription : $this->endTxnOnSubscription;
        $this->endTxnOnSubscriptionResponse = ( $message->endTxnOnSubscriptionResponse !== null ) ? $message->endTxnOnSubscriptionResponse : $this->endTxnOnSubscriptionResponse;
        $this->tcClientConnectRequest = ( $message->tcClientConnectRequest !== null ) ? $message->tcClientConnectRequest : $this->tcClientConnectRequest;
        $this->tcClientConnectResponse = ( $message->tcClientConnectResponse !== null ) ? $message->tcClientConnectResponse : $this->tcClientConnectResponse;
    }


}

