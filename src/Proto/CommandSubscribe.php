<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandSubscribe
 */
class CommandSubscribe extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * topic required string = 1
     *
     * @var string
     */
    protected $topic = null;

    /**
     * subscription required string = 2
     *
     * @var string
     */
    protected $subscription = null;

    /**
     * subType required enum = 3
     *
     * @var \Pulsar\Proto\CommandSubscribe\SubType
     */
    protected $subType = null;

    /**
     * consumer_id required uint64 = 4
     *
     * @var int
     */
    protected $consumer_id = null;

    /**
     * request_id required uint64 = 5
     *
     * @var int
     */
    protected $request_id = null;

    /**
     * consumer_name optional string = 6
     *
     * @var string
     */
    protected $consumer_name = null;

    /**
     * priority_level optional int32 = 7
     *
     * @var int
     */
    protected $priority_level = null;

    /**
     * durable optional bool = 8
     *
     * @var bool
     */
    protected $durable = null;

    /**
     * start_message_id optional message = 9
     *
     * @var \Pulsar\Proto\MessageIdData
     */
    protected $start_message_id = null;

    /**
     * metadata repeated message = 10
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    protected $metadata = null;

    /**
     * read_compacted optional bool = 11
     *
     * @var bool
     */
    protected $read_compacted = null;

    /**
     * schema optional message = 12
     *
     * @var \Pulsar\Proto\Schema
     */
    protected $schema = null;

    /**
     * initialPosition optional enum = 13
     *
     * @var \Pulsar\Proto\CommandSubscribe\InitialPosition
     */
    protected $initialPosition = null;

    /**
     * replicate_subscription_state optional bool = 14
     *
     * @var bool
     */
    protected $replicate_subscription_state = null;

    /**
     * force_topic_creation optional bool = 15
     *
     * @var bool
     */
    protected $force_topic_creation = null;

    /**
     * start_message_rollback_duration_sec optional uint64 = 16
     *
     * @var int
     */
    protected $start_message_rollback_duration_sec = null;

    /**
     * keySharedMeta optional message = 17
     *
     * @var \Pulsar\Proto\KeySharedMeta
     */
    protected $keySharedMeta = null;

    /**
     * subscription_properties repeated message = 18
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    protected $subscription_properties = null;

    /**
     * consumer_epoch optional uint64 = 19
     *
     * @var int
     */
    protected $consumer_epoch = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->durable = true;
        $this->initialPosition = \Pulsar\Proto\CommandSubscribe\InitialPosition::Latest();
        $this->force_topic_creation = true;
        $this->start_message_rollback_duration_sec = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'topic' has a value
     *
     * @return bool
     */
    public function hasTopic()
    {
        return $this->topic !== null;
    }

    /**
     * Get 'topic' value
     *
     * @return string
     */
    public function getTopic()
    {
        return $this->topic;
    }

    /**
     * Set 'topic' value
     *
     * @param string $value
     */
    public function setTopic($value)
    {
        $this->topic = $value;
    }

    /**
     * Check if 'subscription' has a value
     *
     * @return bool
     */
    public function hasSubscription()
    {
        return $this->subscription !== null;
    }

    /**
     * Get 'subscription' value
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->subscription;
    }

    /**
     * Set 'subscription' value
     *
     * @param string $value
     */
    public function setSubscription($value)
    {
        $this->subscription = $value;
    }

    /**
     * Check if 'subType' has a value
     *
     * @return bool
     */
    public function hasSubType()
    {
        return $this->subType !== null;
    }

    /**
     * Get 'subType' value
     *
     * @return \Pulsar\Proto\CommandSubscribe\SubType
     */
    public function getSubType()
    {
        return $this->subType;
    }

    /**
     * Set 'subType' value
     *
     * @param \Pulsar\Proto\CommandSubscribe\SubType $value
     */
    public function setSubType(\Pulsar\Proto\CommandSubscribe\SubType $value)
    {
        $this->subType = $value;
    }

    /**
     * Check if 'consumer_id' has a value
     *
     * @return bool
     */
    public function hasConsumerId()
    {
        return $this->consumer_id !== null;
    }

    /**
     * Get 'consumer_id' value
     *
     * @return int
     */
    public function getConsumerId()
    {
        return $this->consumer_id;
    }

    /**
     * Set 'consumer_id' value
     *
     * @param int $value
     */
    public function setConsumerId($value)
    {
        $this->consumer_id = $value;
    }

    /**
     * Check if 'request_id' has a value
     *
     * @return bool
     */
    public function hasRequestId()
    {
        return $this->request_id !== null;
    }

    /**
     * Get 'request_id' value
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Set 'request_id' value
     *
     * @param int $value
     */
    public function setRequestId($value)
    {
        $this->request_id = $value;
    }

    /**
     * Check if 'consumer_name' has a value
     *
     * @return bool
     */
    public function hasConsumerName()
    {
        return $this->consumer_name !== null;
    }

    /**
     * Get 'consumer_name' value
     *
     * @return string
     */
    public function getConsumerName()
    {
        return $this->consumer_name;
    }

    /**
     * Set 'consumer_name' value
     *
     * @param string $value
     */
    public function setConsumerName($value = null)
    {
        $this->consumer_name = $value;
    }

    /**
     * Check if 'priority_level' has a value
     *
     * @return bool
     */
    public function hasPriorityLevel()
    {
        return $this->priority_level !== null;
    }

    /**
     * Get 'priority_level' value
     *
     * @return int
     */
    public function getPriorityLevel()
    {
        return $this->priority_level;
    }

    /**
     * Set 'priority_level' value
     *
     * @param int $value
     */
    public function setPriorityLevel($value = null)
    {
        $this->priority_level = $value;
    }

    /**
     * Check if 'durable' has a value
     *
     * @return bool
     */
    public function hasDurable()
    {
        return $this->durable !== null;
    }

    /**
     * Get 'durable' value
     *
     * @return bool
     */
    public function getDurable()
    {
        return $this->durable;
    }

    /**
     * Set 'durable' value
     *
     * @param bool $value
     */
    public function setDurable($value = null)
    {
        $this->durable = $value;
    }

    /**
     * Check if 'start_message_id' has a value
     *
     * @return bool
     */
    public function hasStartMessageId()
    {
        return $this->start_message_id !== null;
    }

    /**
     * Get 'start_message_id' value
     *
     * @return \Pulsar\Proto\MessageIdData
     */
    public function getStartMessageId()
    {
        return $this->start_message_id;
    }

    /**
     * Set 'start_message_id' value
     *
     * @param \Pulsar\Proto\MessageIdData $value
     */
    public function setStartMessageId(?\Pulsar\Proto\MessageIdData $value = null)
    {
        $this->start_message_id = $value;
    }

    /**
     * Check if 'metadata' has a value
     *
     * @return bool
     */
    public function hasMetadataList()
    {
        return $this->metadata !== null;
    }

    /**
     * Get 'metadata' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    public function getMetadataList()
    {
        return $this->metadata;
    }

    /**
     * Set 'metadata' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyValue> $value
     */
    public function setMetadataList(?\Protobuf\Collection $value = null)
    {
        $this->metadata = $value;
    }

    /**
     * Add a new element to 'metadata'
     *
     * @param \Pulsar\Proto\KeyValue $value
     */
    public function addMetadata(\Pulsar\Proto\KeyValue $value)
    {
        if ($this->metadata === null) {
            $this->metadata = new \Protobuf\MessageCollection();
        }

        $this->metadata->add($value);
    }

    /**
     * Check if 'read_compacted' has a value
     *
     * @return bool
     */
    public function hasReadCompacted()
    {
        return $this->read_compacted !== null;
    }

    /**
     * Get 'read_compacted' value
     *
     * @return bool
     */
    public function getReadCompacted()
    {
        return $this->read_compacted;
    }

    /**
     * Set 'read_compacted' value
     *
     * @param bool $value
     */
    public function setReadCompacted($value = null)
    {
        $this->read_compacted = $value;
    }

    /**
     * Check if 'schema' has a value
     *
     * @return bool
     */
    public function hasSchema()
    {
        return $this->schema !== null;
    }

    /**
     * Get 'schema' value
     *
     * @return \Pulsar\Proto\Schema
     */
    public function getSchema()
    {
        return $this->schema;
    }

    /**
     * Set 'schema' value
     *
     * @param \Pulsar\Proto\Schema $value
     */
    public function setSchema(?\Pulsar\Proto\Schema $value = null)
    {
        $this->schema = $value;
    }

    /**
     * Check if 'initialPosition' has a value
     *
     * @return bool
     */
    public function hasInitialPosition()
    {
        return $this->initialPosition !== null;
    }

    /**
     * Get 'initialPosition' value
     *
     * @return \Pulsar\Proto\CommandSubscribe\InitialPosition
     */
    public function getInitialPosition()
    {
        return $this->initialPosition;
    }

    /**
     * Set 'initialPosition' value
     *
     * @param \Pulsar\Proto\CommandSubscribe\InitialPosition $value
     */
    public function setInitialPosition(?\Pulsar\Proto\CommandSubscribe\InitialPosition $value = null)
    {
        $this->initialPosition = $value;
    }

    /**
     * Check if 'replicate_subscription_state' has a value
     *
     * @return bool
     */
    public function hasReplicateSubscriptionState()
    {
        return $this->replicate_subscription_state !== null;
    }

    /**
     * Get 'replicate_subscription_state' value
     *
     * @return bool
     */
    public function getReplicateSubscriptionState()
    {
        return $this->replicate_subscription_state;
    }

    /**
     * Set 'replicate_subscription_state' value
     *
     * @param bool $value
     */
    public function setReplicateSubscriptionState($value = null)
    {
        $this->replicate_subscription_state = $value;
    }

    /**
     * Check if 'force_topic_creation' has a value
     *
     * @return bool
     */
    public function hasForceTopicCreation()
    {
        return $this->force_topic_creation !== null;
    }

    /**
     * Get 'force_topic_creation' value
     *
     * @return bool
     */
    public function getForceTopicCreation()
    {
        return $this->force_topic_creation;
    }

    /**
     * Set 'force_topic_creation' value
     *
     * @param bool $value
     */
    public function setForceTopicCreation($value = null)
    {
        $this->force_topic_creation = $value;
    }

    /**
     * Check if 'start_message_rollback_duration_sec' has a value
     *
     * @return bool
     */
    public function hasStartMessageRollbackDurationSec()
    {
        return $this->start_message_rollback_duration_sec !== null;
    }

    /**
     * Get 'start_message_rollback_duration_sec' value
     *
     * @return int
     */
    public function getStartMessageRollbackDurationSec()
    {
        return $this->start_message_rollback_duration_sec;
    }

    /**
     * Set 'start_message_rollback_duration_sec' value
     *
     * @param int $value
     */
    public function setStartMessageRollbackDurationSec($value = null)
    {
        $this->start_message_rollback_duration_sec = $value;
    }

    /**
     * Check if 'keySharedMeta' has a value
     *
     * @return bool
     */
    public function hasKeySharedMeta()
    {
        return $this->keySharedMeta !== null;
    }

    /**
     * Get 'keySharedMeta' value
     *
     * @return \Pulsar\Proto\KeySharedMeta
     */
    public function getKeySharedMeta()
    {
        return $this->keySharedMeta;
    }

    /**
     * Set 'keySharedMeta' value
     *
     * @param \Pulsar\Proto\KeySharedMeta $value
     */
    public function setKeySharedMeta(?\Pulsar\Proto\KeySharedMeta $value = null)
    {
        $this->keySharedMeta = $value;
    }

    /**
     * Check if 'subscription_properties' has a value
     *
     * @return bool
     */
    public function hasSubscriptionPropertiesList()
    {
        return $this->subscription_properties !== null;
    }

    /**
     * Get 'subscription_properties' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    public function getSubscriptionPropertiesList()
    {
        return $this->subscription_properties;
    }

    /**
     * Set 'subscription_properties' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyValue> $value
     */
    public function setSubscriptionPropertiesList(?\Protobuf\Collection $value = null)
    {
        $this->subscription_properties = $value;
    }

    /**
     * Add a new element to 'subscription_properties'
     *
     * @param \Pulsar\Proto\KeyValue $value
     */
    public function addSubscriptionProperties(\Pulsar\Proto\KeyValue $value)
    {
        if ($this->subscription_properties === null) {
            $this->subscription_properties = new \Protobuf\MessageCollection();
        }

        $this->subscription_properties->add($value);
    }

    /**
     * Check if 'consumer_epoch' has a value
     *
     * @return bool
     */
    public function hasConsumerEpoch()
    {
        return $this->consumer_epoch !== null;
    }

    /**
     * Get 'consumer_epoch' value
     *
     * @return int
     */
    public function getConsumerEpoch()
    {
        return $this->consumer_epoch;
    }

    /**
     * Set 'consumer_epoch' value
     *
     * @param int $value
     */
    public function setConsumerEpoch($value = null)
    {
        $this->consumer_epoch = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['topic'])) {
            throw new \InvalidArgumentException('Field "topic" (tag 1) is required but has no value.');
        }

        if (!isset($values['subscription'])) {
            throw new \InvalidArgumentException('Field "subscription" (tag 2) is required but has no value.');
        }

        if (!isset($values['subType'])) {
            throw new \InvalidArgumentException('Field "subType" (tag 3) is required but has no value.');
        }

        if (!isset($values['consumer_id'])) {
            throw new \InvalidArgumentException('Field "consumer_id" (tag 4) is required but has no value.');
        }

        if (!isset($values['request_id'])) {
            throw new \InvalidArgumentException('Field "request_id" (tag 5) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'consumer_name'                       => null,
            'priority_level'                      => null,
            'durable'                             => true,
            'start_message_id'                    => null,
            'metadata'                            => [],
            'read_compacted'                      => null,
            'schema'                              => null,
            'initialPosition'                     => \Pulsar\Proto\CommandSubscribe\InitialPosition::Latest(),
            'replicate_subscription_state'        => null,
            'force_topic_creation'                => true,
            'start_message_rollback_duration_sec' => '0',
            'keySharedMeta'                       => null,
            'subscription_properties'             => [],
            'consumer_epoch'                      => null,
        ], $values);

        $message->setTopic($values['topic']);
        $message->setSubscription($values['subscription']);
        $message->setSubType($values['subType']);
        $message->setConsumerId($values['consumer_id']);
        $message->setRequestId($values['request_id']);
        $message->setConsumerName($values['consumer_name']);
        $message->setPriorityLevel($values['priority_level']);
        $message->setDurable($values['durable']);
        $message->setStartMessageId($values['start_message_id']);
        $message->setReadCompacted($values['read_compacted']);
        $message->setSchema($values['schema']);
        $message->setInitialPosition($values['initialPosition']);
        $message->setReplicateSubscriptionState($values['replicate_subscription_state']);
        $message->setForceTopicCreation($values['force_topic_creation']);
        $message->setStartMessageRollbackDurationSec($values['start_message_rollback_duration_sec']);
        $message->setKeySharedMeta($values['keySharedMeta']);
        $message->setConsumerEpoch($values['consumer_epoch']);

        foreach ($values['metadata'] as $item) {
            $message->addMetadata($item);
        }

        foreach ($values['subscription_properties'] as $item) {
            $message->addSubscriptionProperties($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandSubscribe',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'topic',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'subscription',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 3,
                    'name'      => 'subType',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.pulsar.proto.CommandSubscribe.SubType',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name'   => 'consumer_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name'   => 'request_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name'   => 'consumer_name',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name'   => 'priority_level',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 8,
                    'name'          => 'durable',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 9,
                    'name'      => 'start_message_id',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.MessageIdData',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 10,
                    'name'      => 'metadata',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name'   => 'read_compacted',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 12,
                    'name'      => 'schema',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.Schema',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 13,
                    'name'          => 'initialPosition',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name'     => '.pulsar.proto.CommandSubscribe.InitialPosition',
                    'default_value' => \Pulsar\Proto\CommandSubscribe\InitialPosition::Latest(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name'   => 'replicate_subscription_state',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 15,
                    'name'          => 'force_topic_creation',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 16,
                    'name'          => 'start_message_rollback_duration_sec',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 17,
                    'name'      => 'keySharedMeta',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.KeySharedMeta',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 18,
                    'name'      => 'subscription_properties',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name'   => 'consumer_epoch',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->topic === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSubscribe#topic" (tag 1) is required but has no value.');
        }

        if ($this->subscription === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSubscribe#subscription" (tag 2) is required but has no value.');
        }

        if ($this->subType === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSubscribe#subType" (tag 3) is required but has no value.');
        }

        if ($this->consumer_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSubscribe#consumer_id" (tag 4) is required but has no value.');
        }

        if ($this->request_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandSubscribe#request_id" (tag 5) is required but has no value.');
        }

        if ($this->topic !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->topic);
        }

        if ($this->subscription !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->subscription);
        }

        if ($this->subType !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->subType->value());
        }

        if ($this->consumer_id !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->consumer_id);
        }

        if ($this->request_id !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->request_id);
        }

        if ($this->consumer_name !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->consumer_name);
        }

        if ($this->priority_level !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->priority_level);
        }

        if ($this->durable !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeBool($stream, $this->durable);
        }

        if ($this->start_message_id !== null) {
            $writer->writeVarint($stream, 74);
            $writer->writeVarint($stream, $this->start_message_id->serializedSize($sizeContext));
            $this->start_message_id->writeTo($context);
        }

        if ($this->metadata !== null) {
            foreach ($this->metadata as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->read_compacted !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeBool($stream, $this->read_compacted);
        }

        if ($this->schema !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeVarint($stream, $this->schema->serializedSize($sizeContext));
            $this->schema->writeTo($context);
        }

        if ($this->initialPosition !== null) {
            $writer->writeVarint($stream, 104);
            $writer->writeVarint($stream, $this->initialPosition->value());
        }

        if ($this->replicate_subscription_state !== null) {
            $writer->writeVarint($stream, 112);
            $writer->writeBool($stream, $this->replicate_subscription_state);
        }

        if ($this->force_topic_creation !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeBool($stream, $this->force_topic_creation);
        }

        if ($this->start_message_rollback_duration_sec !== null) {
            $writer->writeVarint($stream, 128);
            $writer->writeVarint($stream, $this->start_message_rollback_duration_sec);
        }

        if ($this->keySharedMeta !== null) {
            $writer->writeVarint($stream, 138);
            $writer->writeVarint($stream, $this->keySharedMeta->serializedSize($sizeContext));
            $this->keySharedMeta->writeTo($context);
        }

        if ($this->subscription_properties !== null) {
            foreach ($this->subscription_properties as $val) {
                $writer->writeVarint($stream, 146);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->consumer_epoch !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->consumer_epoch);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->topic = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->subscription = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->subType = \Pulsar\Proto\CommandSubscribe\SubType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->consumer_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->request_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->consumer_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->priority_level = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->durable = $reader->readBool($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\MessageIdData();

                $this->start_message_id = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyValue();

                if ($this->metadata === null) {
                    $this->metadata = new \Protobuf\MessageCollection();
                }

                $this->metadata->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->read_compacted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\Schema();

                $this->schema = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->initialPosition = \Pulsar\Proto\CommandSubscribe\InitialPosition::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->replicate_subscription_state = $reader->readBool($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->force_topic_creation = $reader->readBool($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->start_message_rollback_duration_sec = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeySharedMeta();

                $this->keySharedMeta = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyValue();

                if ($this->subscription_properties === null) {
                    $this->subscription_properties = new \Protobuf\MessageCollection();
                }

                $this->subscription_properties->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->consumer_epoch = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->topic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->topic);
        }

        if ($this->subscription !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->subscription);
        }

        if ($this->subType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->subType->value());
        }

        if ($this->consumer_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->consumer_id);
        }

        if ($this->request_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->request_id);
        }

        if ($this->consumer_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->consumer_name);
        }

        if ($this->priority_level !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->priority_level);
        }

        if ($this->durable !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->start_message_id !== null) {
            $innerSize = $this->start_message_id->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->metadata !== null) {
            foreach ($this->metadata as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->read_compacted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->schema !== null) {
            $innerSize = $this->schema->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->initialPosition !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->initialPosition->value());
        }

        if ($this->replicate_subscription_state !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->force_topic_creation !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->start_message_rollback_duration_sec !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->start_message_rollback_duration_sec);
        }

        if ($this->keySharedMeta !== null) {
            $innerSize = $this->keySharedMeta->serializedSize($context);

            $size += 2;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->subscription_properties !== null) {
            foreach ($this->subscription_properties as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 2;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->consumer_epoch !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->consumer_epoch);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->topic = null;
        $this->subscription = null;
        $this->subType = null;
        $this->consumer_id = null;
        $this->request_id = null;
        $this->consumer_name = null;
        $this->priority_level = null;
        $this->durable = true;
        $this->start_message_id = null;
        $this->metadata = null;
        $this->read_compacted = null;
        $this->schema = null;
        $this->initialPosition = \Pulsar\Proto\CommandSubscribe\InitialPosition::Latest();
        $this->replicate_subscription_state = null;
        $this->force_topic_creation = true;
        $this->start_message_rollback_duration_sec = '0';
        $this->keySharedMeta = null;
        $this->subscription_properties = null;
        $this->consumer_epoch = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandSubscribe) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->topic = ( $message->topic !== null ) ? $message->topic : $this->topic;
        $this->subscription = ( $message->subscription !== null ) ? $message->subscription : $this->subscription;
        $this->subType = ( $message->subType !== null ) ? $message->subType : $this->subType;
        $this->consumer_id = ( $message->consumer_id !== null ) ? $message->consumer_id : $this->consumer_id;
        $this->request_id = ( $message->request_id !== null ) ? $message->request_id : $this->request_id;
        $this->consumer_name = ( $message->consumer_name !== null ) ? $message->consumer_name : $this->consumer_name;
        $this->priority_level = ( $message->priority_level !== null ) ? $message->priority_level : $this->priority_level;
        $this->durable = ( $message->durable !== null ) ? $message->durable : $this->durable;
        $this->start_message_id = ( $message->start_message_id !== null ) ? $message->start_message_id : $this->start_message_id;
        $this->metadata = ( $message->metadata !== null ) ? $message->metadata : $this->metadata;
        $this->read_compacted = ( $message->read_compacted !== null ) ? $message->read_compacted : $this->read_compacted;
        $this->schema = ( $message->schema !== null ) ? $message->schema : $this->schema;
        $this->initialPosition = ( $message->initialPosition !== null ) ? $message->initialPosition : $this->initialPosition;
        $this->replicate_subscription_state = ( $message->replicate_subscription_state !== null ) ? $message->replicate_subscription_state : $this->replicate_subscription_state;
        $this->force_topic_creation = ( $message->force_topic_creation !== null ) ? $message->force_topic_creation : $this->force_topic_creation;
        $this->start_message_rollback_duration_sec = ( $message->start_message_rollback_duration_sec !== null ) ? $message->start_message_rollback_duration_sec : $this->start_message_rollback_duration_sec;
        $this->keySharedMeta = ( $message->keySharedMeta !== null ) ? $message->keySharedMeta : $this->keySharedMeta;
        $this->subscription_properties = ( $message->subscription_properties !== null ) ? $message->subscription_properties : $this->subscription_properties;
        $this->consumer_epoch = ( $message->consumer_epoch !== null ) ? $message->consumer_epoch : $this->consumer_epoch;
    }


}

