<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.MessageMetadata
 */
class MessageMetadata extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * producer_name required string = 1
     *
     * @var string
     */
    protected $producer_name = null;

    /**
     * sequence_id required uint64 = 2
     *
     * @var int
     */
    protected $sequence_id = null;

    /**
     * publish_time required uint64 = 3
     *
     * @var int
     */
    protected $publish_time = null;

    /**
     * properties repeated message = 4
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    protected $properties = null;

    /**
     * replicated_from optional string = 5
     *
     * @var string
     */
    protected $replicated_from = null;

    /**
     * partition_key optional string = 6
     *
     * @var string
     */
    protected $partition_key = null;

    /**
     * replicate_to repeated string = 7
     *
     * @var \Protobuf\Collection
     */
    protected $replicate_to = null;

    /**
     * compression optional enum = 8
     *
     * @var \Pulsar\Proto\CompressionType
     */
    protected $compression = null;

    /**
     * uncompressed_size optional uint32 = 9
     *
     * @var int
     */
    protected $uncompressed_size = null;

    /**
     * num_messages_in_batch optional int32 = 11
     *
     * @var int
     */
    protected $num_messages_in_batch = null;

    /**
     * event_time optional uint64 = 12
     *
     * @var int
     */
    protected $event_time = null;

    /**
     * encryption_keys repeated message = 13
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\EncryptionKeys>
     */
    protected $encryption_keys = null;

    /**
     * encryption_algo optional string = 14
     *
     * @var string
     */
    protected $encryption_algo = null;

    /**
     * encryption_param optional bytes = 15
     *
     * @var \Protobuf\Stream
     */
    protected $encryption_param = null;

    /**
     * schema_version optional bytes = 16
     *
     * @var \Protobuf\Stream
     */
    protected $schema_version = null;

    /**
     * partition_key_b64_encoded optional bool = 17
     *
     * @var bool
     */
    protected $partition_key_b64_encoded = null;

    /**
     * ordering_key optional bytes = 18
     *
     * @var \Protobuf\Stream
     */
    protected $ordering_key = null;

    /**
     * deliver_at_time optional int64 = 19
     *
     * @var int
     */
    protected $deliver_at_time = null;

    /**
     * marker_type optional int32 = 20
     *
     * @var int
     */
    protected $marker_type = null;

    /**
     * txnid_least_bits optional uint64 = 22
     *
     * @var int
     */
    protected $txnid_least_bits = null;

    /**
     * txnid_most_bits optional uint64 = 23
     *
     * @var int
     */
    protected $txnid_most_bits = null;

    /**
     * highest_sequence_id optional uint64 = 24
     *
     * @var int
     */
    protected $highest_sequence_id = null;

    /**
     * null_value optional bool = 25
     *
     * @var bool
     */
    protected $null_value = null;

    /**
     * uuid optional string = 26
     *
     * @var string
     */
    protected $uuid = null;

    /**
     * num_chunks_from_msg optional int32 = 27
     *
     * @var int
     */
    protected $num_chunks_from_msg = null;

    /**
     * total_chunk_msg_size optional int32 = 28
     *
     * @var int
     */
    protected $total_chunk_msg_size = null;

    /**
     * chunk_id optional int32 = 29
     *
     * @var int
     */
    protected $chunk_id = null;

    /**
     * null_partition_key optional bool = 30
     *
     * @var bool
     */
    protected $null_partition_key = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->compression = \Pulsar\Proto\CompressionType::NONE();
        $this->uncompressed_size = '0';
        $this->num_messages_in_batch = null;
        $this->event_time = '0';
        $this->partition_key_b64_encoded = false;
        $this->highest_sequence_id = '0';
        $this->null_value = false;
        $this->null_partition_key = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'producer_name' has a value
     *
     * @return bool
     */
    public function hasProducerName()
    {
        return $this->producer_name !== null;
    }

    /**
     * Get 'producer_name' value
     *
     * @return string
     */
    public function getProducerName()
    {
        return $this->producer_name;
    }

    /**
     * Set 'producer_name' value
     *
     * @param string $value
     */
    public function setProducerName($value)
    {
        $this->producer_name = $value;
    }

    /**
     * Check if 'sequence_id' has a value
     *
     * @return bool
     */
    public function hasSequenceId()
    {
        return $this->sequence_id !== null;
    }

    /**
     * Get 'sequence_id' value
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->sequence_id;
    }

    /**
     * Set 'sequence_id' value
     *
     * @param int $value
     */
    public function setSequenceId($value)
    {
        $this->sequence_id = $value;
    }

    /**
     * Check if 'publish_time' has a value
     *
     * @return bool
     */
    public function hasPublishTime()
    {
        return $this->publish_time !== null;
    }

    /**
     * Get 'publish_time' value
     *
     * @return int
     */
    public function getPublishTime()
    {
        return $this->publish_time;
    }

    /**
     * Set 'publish_time' value
     *
     * @param int $value
     */
    public function setPublishTime($value)
    {
        $this->publish_time = $value;
    }

    /**
     * Check if 'properties' has a value
     *
     * @return bool
     */
    public function hasPropertiesList()
    {
        return $this->properties !== null;
    }

    /**
     * Get 'properties' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    public function getPropertiesList()
    {
        return $this->properties;
    }

    /**
     * Set 'properties' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyValue> $value
     */
    public function setPropertiesList(?\Protobuf\Collection $value = null)
    {
        $this->properties = $value;
    }

    /**
     * Add a new element to 'properties'
     *
     * @param \Pulsar\Proto\KeyValue $value
     */
    public function addProperties(\Pulsar\Proto\KeyValue $value)
    {
        if ($this->properties === null) {
            $this->properties = new \Protobuf\MessageCollection();
        }

        $this->properties->add($value);
    }

    /**
     * Check if 'replicated_from' has a value
     *
     * @return bool
     */
    public function hasReplicatedFrom()
    {
        return $this->replicated_from !== null;
    }

    /**
     * Get 'replicated_from' value
     *
     * @return string
     */
    public function getReplicatedFrom()
    {
        return $this->replicated_from;
    }

    /**
     * Set 'replicated_from' value
     *
     * @param string $value
     */
    public function setReplicatedFrom($value = null)
    {
        $this->replicated_from = $value;
    }

    /**
     * Check if 'partition_key' has a value
     *
     * @return bool
     */
    public function hasPartitionKey()
    {
        return $this->partition_key !== null;
    }

    /**
     * Get 'partition_key' value
     *
     * @return string
     */
    public function getPartitionKey()
    {
        return $this->partition_key;
    }

    /**
     * Set 'partition_key' value
     *
     * @param string $value
     */
    public function setPartitionKey($value = null)
    {
        $this->partition_key = $value;
    }

    /**
     * Check if 'replicate_to' has a value
     *
     * @return bool
     */
    public function hasReplicateToList()
    {
        return $this->replicate_to !== null;
    }

    /**
     * Get 'replicate_to' value
     *
     * @return \Protobuf\Collection
     */
    public function getReplicateToList()
    {
        return $this->replicate_to;
    }

    /**
     * Set 'replicate_to' value
     *
     * @param \Protobuf\Collection $value
     */
    public function setReplicateToList(?\Protobuf\Collection $value = null)
    {
        $this->replicate_to = $value;
    }

    /**
     * Add a new element to 'replicate_to'
     *
     * @param string $value
     */
    public function addReplicateTo($value)
    {
        if ($this->replicate_to === null) {
            $this->replicate_to = new \Protobuf\ScalarCollection();
        }

        $this->replicate_to->add($value);
    }

    /**
     * Check if 'compression' has a value
     *
     * @return bool
     */
    public function hasCompression()
    {
        return $this->compression !== null;
    }

    /**
     * Get 'compression' value
     *
     * @return \Pulsar\Proto\CompressionType
     */
    public function getCompression()
    {
        return $this->compression;
    }

    /**
     * Set 'compression' value
     *
     * @param \Pulsar\Proto\CompressionType $value
     */
    public function setCompression(?\Pulsar\Proto\CompressionType $value = null)
    {
        $this->compression = $value;
    }

    /**
     * Check if 'uncompressed_size' has a value
     *
     * @return bool
     */
    public function hasUncompressedSize()
    {
        return $this->uncompressed_size !== null;
    }

    /**
     * Get 'uncompressed_size' value
     *
     * @return int
     */
    public function getUncompressedSize()
    {
        return $this->uncompressed_size;
    }

    /**
     * Set 'uncompressed_size' value
     *
     * @param int $value
     */
    public function setUncompressedSize($value = null)
    {
        $this->uncompressed_size = $value;
    }

    /**
     * Check if 'num_messages_in_batch' has a value
     *
     * @return bool
     */
    public function hasNumMessagesInBatch()
    {
        return $this->num_messages_in_batch !== null;
    }

    /**
     * Get 'num_messages_in_batch' value
     *
     * @return int
     */
    public function getNumMessagesInBatch()
    {
        return $this->num_messages_in_batch;
    }

    /**
     * Set 'num_messages_in_batch' value
     *
     * @param int $value
     */
    public function setNumMessagesInBatch($value = null)
    {
        $this->num_messages_in_batch = $value;
    }

    /**
     * Check if 'event_time' has a value
     *
     * @return bool
     */
    public function hasEventTime()
    {
        return $this->event_time !== null;
    }

    /**
     * Get 'event_time' value
     *
     * @return int
     */
    public function getEventTime()
    {
        return $this->event_time;
    }

    /**
     * Set 'event_time' value
     *
     * @param int $value
     */
    public function setEventTime($value = null)
    {
        $this->event_time = $value;
    }

    /**
     * Check if 'encryption_keys' has a value
     *
     * @return bool
     */
    public function hasEncryptionKeysList()
    {
        return $this->encryption_keys !== null;
    }

    /**
     * Get 'encryption_keys' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\EncryptionKeys>
     */
    public function getEncryptionKeysList()
    {
        return $this->encryption_keys;
    }

    /**
     * Set 'encryption_keys' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\EncryptionKeys> $value
     */
    public function setEncryptionKeysList(?\Protobuf\Collection $value = null)
    {
        $this->encryption_keys = $value;
    }

    /**
     * Add a new element to 'encryption_keys'
     *
     * @param \Pulsar\Proto\EncryptionKeys $value
     */
    public function addEncryptionKeys(\Pulsar\Proto\EncryptionKeys $value)
    {
        if ($this->encryption_keys === null) {
            $this->encryption_keys = new \Protobuf\MessageCollection();
        }

        $this->encryption_keys->add($value);
    }

    /**
     * Check if 'encryption_algo' has a value
     *
     * @return bool
     */
    public function hasEncryptionAlgo()
    {
        return $this->encryption_algo !== null;
    }

    /**
     * Get 'encryption_algo' value
     *
     * @return string
     */
    public function getEncryptionAlgo()
    {
        return $this->encryption_algo;
    }

    /**
     * Set 'encryption_algo' value
     *
     * @param string $value
     */
    public function setEncryptionAlgo($value = null)
    {
        $this->encryption_algo = $value;
    }

    /**
     * Check if 'encryption_param' has a value
     *
     * @return bool
     */
    public function hasEncryptionParam()
    {
        return $this->encryption_param !== null;
    }

    /**
     * Get 'encryption_param' value
     *
     * @return \Protobuf\Stream
     */
    public function getEncryptionParam()
    {
        return $this->encryption_param;
    }

    /**
     * Set 'encryption_param' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setEncryptionParam($value = null)
    {
        if ($value !== null && !$value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->encryption_param = $value;
    }

    /**
     * Check if 'schema_version' has a value
     *
     * @return bool
     */
    public function hasSchemaVersion()
    {
        return $this->schema_version !== null;
    }

    /**
     * Get 'schema_version' value
     *
     * @return \Protobuf\Stream
     */
    public function getSchemaVersion()
    {
        return $this->schema_version;
    }

    /**
     * Set 'schema_version' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setSchemaVersion($value = null)
    {
        if ($value !== null && !$value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->schema_version = $value;
    }

    /**
     * Check if 'partition_key_b64_encoded' has a value
     *
     * @return bool
     */
    public function hasPartitionKeyB64Encoded()
    {
        return $this->partition_key_b64_encoded !== null;
    }

    /**
     * Get 'partition_key_b64_encoded' value
     *
     * @return bool
     */
    public function getPartitionKeyB64Encoded()
    {
        return $this->partition_key_b64_encoded;
    }

    /**
     * Set 'partition_key_b64_encoded' value
     *
     * @param bool $value
     */
    public function setPartitionKeyB64Encoded($value = null)
    {
        $this->partition_key_b64_encoded = $value;
    }

    /**
     * Check if 'ordering_key' has a value
     *
     * @return bool
     */
    public function hasOrderingKey()
    {
        return $this->ordering_key !== null;
    }

    /**
     * Get 'ordering_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getOrderingKey()
    {
        return $this->ordering_key;
    }

    /**
     * Set 'ordering_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOrderingKey($value = null)
    {
        if ($value !== null && !$value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->ordering_key = $value;
    }

    /**
     * Check if 'deliver_at_time' has a value
     *
     * @return bool
     */
    public function hasDeliverAtTime()
    {
        return $this->deliver_at_time !== null;
    }

    /**
     * Get 'deliver_at_time' value
     *
     * @return int
     */
    public function getDeliverAtTime()
    {
        return $this->deliver_at_time;
    }

    /**
     * Set 'deliver_at_time' value
     *
     * @param int $value
     */
    public function setDeliverAtTime($value = null)
    {
        $this->deliver_at_time = $value;
    }

    /**
     * Check if 'marker_type' has a value
     *
     * @return bool
     */
    public function hasMarkerType()
    {
        return $this->marker_type !== null;
    }

    /**
     * Get 'marker_type' value
     *
     * @return int
     */
    public function getMarkerType()
    {
        return $this->marker_type;
    }

    /**
     * Set 'marker_type' value
     *
     * @param int $value
     */
    public function setMarkerType($value = null)
    {
        $this->marker_type = $value;
    }

    /**
     * Check if 'txnid_least_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidLeastBits()
    {
        return $this->txnid_least_bits !== null;
    }

    /**
     * Get 'txnid_least_bits' value
     *
     * @return int
     */
    public function getTxnidLeastBits()
    {
        return $this->txnid_least_bits;
    }

    /**
     * Set 'txnid_least_bits' value
     *
     * @param int $value
     */
    public function setTxnidLeastBits($value = null)
    {
        $this->txnid_least_bits = $value;
    }

    /**
     * Check if 'txnid_most_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidMostBits()
    {
        return $this->txnid_most_bits !== null;
    }

    /**
     * Get 'txnid_most_bits' value
     *
     * @return int
     */
    public function getTxnidMostBits()
    {
        return $this->txnid_most_bits;
    }

    /**
     * Set 'txnid_most_bits' value
     *
     * @param int $value
     */
    public function setTxnidMostBits($value = null)
    {
        $this->txnid_most_bits = $value;
    }

    /**
     * Check if 'highest_sequence_id' has a value
     *
     * @return bool
     */
    public function hasHighestSequenceId()
    {
        return $this->highest_sequence_id !== null;
    }

    /**
     * Get 'highest_sequence_id' value
     *
     * @return int
     */
    public function getHighestSequenceId()
    {
        return $this->highest_sequence_id;
    }

    /**
     * Set 'highest_sequence_id' value
     *
     * @param int $value
     */
    public function setHighestSequenceId($value = null)
    {
        $this->highest_sequence_id = $value;
    }

    /**
     * Check if 'null_value' has a value
     *
     * @return bool
     */
    public function hasNullValue()
    {
        return $this->null_value !== null;
    }

    /**
     * Get 'null_value' value
     *
     * @return bool
     */
    public function getNullValue()
    {
        return $this->null_value;
    }

    /**
     * Set 'null_value' value
     *
     * @param bool $value
     */
    public function setNullValue($value = null)
    {
        $this->null_value = $value;
    }

    /**
     * Check if 'uuid' has a value
     *
     * @return bool
     */
    public function hasUuid()
    {
        return $this->uuid !== null;
    }

    /**
     * Get 'uuid' value
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * Set 'uuid' value
     *
     * @param string $value
     */
    public function setUuid($value = null)
    {
        $this->uuid = $value;
    }

    /**
     * Check if 'num_chunks_from_msg' has a value
     *
     * @return bool
     */
    public function hasNumChunksFromMsg()
    {
        return $this->num_chunks_from_msg !== null;
    }

    /**
     * Get 'num_chunks_from_msg' value
     *
     * @return int
     */
    public function getNumChunksFromMsg()
    {
        return $this->num_chunks_from_msg;
    }

    /**
     * Set 'num_chunks_from_msg' value
     *
     * @param int $value
     */
    public function setNumChunksFromMsg($value = null)
    {
        $this->num_chunks_from_msg = $value;
    }

    /**
     * Check if 'total_chunk_msg_size' has a value
     *
     * @return bool
     */
    public function hasTotalChunkMsgSize()
    {
        return $this->total_chunk_msg_size !== null;
    }

    /**
     * Get 'total_chunk_msg_size' value
     *
     * @return int
     */
    public function getTotalChunkMsgSize()
    {
        return $this->total_chunk_msg_size;
    }

    /**
     * Set 'total_chunk_msg_size' value
     *
     * @param int $value
     */
    public function setTotalChunkMsgSize($value = null)
    {
        $this->total_chunk_msg_size = $value;
    }

    /**
     * Check if 'chunk_id' has a value
     *
     * @return bool
     */
    public function hasChunkId()
    {
        return $this->chunk_id !== null;
    }

    /**
     * Get 'chunk_id' value
     *
     * @return int
     */
    public function getChunkId()
    {
        return $this->chunk_id;
    }

    /**
     * Set 'chunk_id' value
     *
     * @param int $value
     */
    public function setChunkId($value = null)
    {
        $this->chunk_id = $value;
    }

    /**
     * Check if 'null_partition_key' has a value
     *
     * @return bool
     */
    public function hasNullPartitionKey()
    {
        return $this->null_partition_key !== null;
    }

    /**
     * Get 'null_partition_key' value
     *
     * @return bool
     */
    public function getNullPartitionKey()
    {
        return $this->null_partition_key;
    }

    /**
     * Set 'null_partition_key' value
     *
     * @param bool $value
     */
    public function setNullPartitionKey($value = null)
    {
        $this->null_partition_key = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['producer_name'])) {
            throw new \InvalidArgumentException('Field "producer_name" (tag 1) is required but has no value.');
        }

        if (!isset($values['sequence_id'])) {
            throw new \InvalidArgumentException('Field "sequence_id" (tag 2) is required but has no value.');
        }

        if (!isset($values['publish_time'])) {
            throw new \InvalidArgumentException('Field "publish_time" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'properties'                => [],
            'replicated_from'           => null,
            'partition_key'             => null,
            'replicate_to'              => [],
            'compression'               => \Pulsar\Proto\CompressionType::NONE(),
            'uncompressed_size'         => '0',
            'num_messages_in_batch'     => '1',
            'event_time'                => '0',
            'encryption_keys'           => [],
            'encryption_algo'           => null,
            'encryption_param'          => null,
            'schema_version'            => null,
            'partition_key_b64_encoded' => false,
            'ordering_key'              => null,
            'deliver_at_time'           => null,
            'marker_type'               => null,
            'txnid_least_bits'          => null,
            'txnid_most_bits'           => null,
            'highest_sequence_id'       => '0',
            'null_value'                => false,
            'uuid'                      => null,
            'num_chunks_from_msg'       => null,
            'total_chunk_msg_size'      => null,
            'chunk_id'                  => null,
            'null_partition_key'        => false,
        ], $values);

        $message->setProducerName($values['producer_name']);
        $message->setSequenceId($values['sequence_id']);
        $message->setPublishTime($values['publish_time']);
        $message->setReplicatedFrom($values['replicated_from']);
        $message->setPartitionKey($values['partition_key']);
        $message->setCompression($values['compression']);
        $message->setUncompressedSize($values['uncompressed_size']);
        $message->setNumMessagesInBatch($values['num_messages_in_batch']);
        $message->setEventTime($values['event_time']);
        $message->setEncryptionAlgo($values['encryption_algo']);
        $message->setEncryptionParam($values['encryption_param']);
        $message->setSchemaVersion($values['schema_version']);
        $message->setPartitionKeyB64Encoded($values['partition_key_b64_encoded']);
        $message->setOrderingKey($values['ordering_key']);
        $message->setDeliverAtTime($values['deliver_at_time']);
        $message->setMarkerType($values['marker_type']);
        $message->setTxnidLeastBits($values['txnid_least_bits']);
        $message->setTxnidMostBits($values['txnid_most_bits']);
        $message->setHighestSequenceId($values['highest_sequence_id']);
        $message->setNullValue($values['null_value']);
        $message->setUuid($values['uuid']);
        $message->setNumChunksFromMsg($values['num_chunks_from_msg']);
        $message->setTotalChunkMsgSize($values['total_chunk_msg_size']);
        $message->setChunkId($values['chunk_id']);
        $message->setNullPartitionKey($values['null_partition_key']);

        foreach ($values['properties'] as $item) {
            $message->addProperties($item);
        }

        foreach ($values['replicate_to'] as $item) {
            $message->addReplicateTo($item);
        }

        foreach ($values['encryption_keys'] as $item) {
            $message->addEncryptionKeys($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'MessageMetadata',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'producer_name',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'sequence_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name'   => 'publish_time',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 4,
                    'name'      => 'properties',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name'   => 'replicated_from',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name'   => 'partition_key',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name'   => 'replicate_to',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 8,
                    'name'          => 'compression',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name'     => '.pulsar.proto.CompressionType',
                    'default_value' => \Pulsar\Proto\CompressionType::NONE(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 9,
                    'name'          => 'uncompressed_size',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 11,
                    'name'          => 'num_messages_in_batch',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '1',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 12,
                    'name'          => 'event_time',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 13,
                    'name'      => 'encryption_keys',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.EncryptionKeys',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name'   => 'encryption_algo',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name'   => 'encryption_param',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name'   => 'schema_version',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 17,
                    'name'          => 'partition_key_b64_encoded',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 18,
                    'name'   => 'ordering_key',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 19,
                    'name'   => 'deliver_at_time',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 20,
                    'name'   => 'marker_type',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 22,
                    'name'   => 'txnid_least_bits',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 23,
                    'name'   => 'txnid_most_bits',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 24,
                    'name'          => 'highest_sequence_id',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 25,
                    'name'          => 'null_value',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 26,
                    'name'   => 'uuid',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 27,
                    'name'   => 'num_chunks_from_msg',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 28,
                    'name'   => 'total_chunk_msg_size',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 29,
                    'name'   => 'chunk_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 30,
                    'name'          => 'null_partition_key',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->producer_name === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\MessageMetadata#producer_name" (tag 1) is required but has no value.');
        }

        if ($this->sequence_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\MessageMetadata#sequence_id" (tag 2) is required but has no value.');
        }

        if ($this->publish_time === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\MessageMetadata#publish_time" (tag 3) is required but has no value.');
        }

        if ($this->producer_name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->producer_name);
        }

        if ($this->sequence_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->sequence_id);
        }

        if ($this->publish_time !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->publish_time);
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->replicated_from !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->replicated_from);
        }

        if ($this->partition_key !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeString($stream, $this->partition_key);
        }

        if ($this->replicate_to !== null) {
            foreach ($this->replicate_to as $val) {
                $writer->writeVarint($stream, 58);
                $writer->writeString($stream, $val);
            }
        }

        if ($this->compression !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->compression->value());
        }

        if ($this->uncompressed_size !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->uncompressed_size);
        }

        if ($this->num_messages_in_batch !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->num_messages_in_batch);
        }

        if ($this->event_time !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->event_time);
        }

        if ($this->encryption_keys !== null) {
            foreach ($this->encryption_keys as $val) {
                $writer->writeVarint($stream, 106);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->encryption_algo !== null) {
            $writer->writeVarint($stream, 114);
            $writer->writeString($stream, $this->encryption_algo);
        }

        if ($this->encryption_param !== null) {
            $writer->writeVarint($stream, 122);
            $writer->writeByteStream($stream, $this->encryption_param);
        }

        if ($this->schema_version !== null) {
            $writer->writeVarint($stream, 130);
            $writer->writeByteStream($stream, $this->schema_version);
        }

        if ($this->partition_key_b64_encoded !== null) {
            $writer->writeVarint($stream, 136);
            $writer->writeBool($stream, $this->partition_key_b64_encoded);
        }

        if ($this->ordering_key !== null) {
            $writer->writeVarint($stream, 146);
            $writer->writeByteStream($stream, $this->ordering_key);
        }

        if ($this->deliver_at_time !== null) {
            $writer->writeVarint($stream, 152);
            $writer->writeVarint($stream, $this->deliver_at_time);
        }

        if ($this->marker_type !== null) {
            $writer->writeVarint($stream, 160);
            $writer->writeVarint($stream, $this->marker_type);
        }

        if ($this->txnid_least_bits !== null) {
            $writer->writeVarint($stream, 176);
            $writer->writeVarint($stream, $this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $writer->writeVarint($stream, 184);
            $writer->writeVarint($stream, $this->txnid_most_bits);
        }

        if ($this->highest_sequence_id !== null) {
            $writer->writeVarint($stream, 192);
            $writer->writeVarint($stream, $this->highest_sequence_id);
        }

        if ($this->null_value !== null) {
            $writer->writeVarint($stream, 200);
            $writer->writeBool($stream, $this->null_value);
        }

        if ($this->uuid !== null) {
            $writer->writeVarint($stream, 210);
            $writer->writeString($stream, $this->uuid);
        }

        if ($this->num_chunks_from_msg !== null) {
            $writer->writeVarint($stream, 216);
            $writer->writeVarint($stream, $this->num_chunks_from_msg);
        }

        if ($this->total_chunk_msg_size !== null) {
            $writer->writeVarint($stream, 224);
            $writer->writeVarint($stream, $this->total_chunk_msg_size);
        }

        if ($this->chunk_id !== null) {
            $writer->writeVarint($stream, 232);
            $writer->writeVarint($stream, $this->chunk_id);
        }

        if ($this->null_partition_key !== null) {
            $writer->writeVarint($stream, 240);
            $writer->writeBool($stream, $this->null_partition_key);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->producer_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->publish_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyValue();

                if ($this->properties === null) {
                    $this->properties = new \Protobuf\MessageCollection();
                }

                $this->properties->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->replicated_from = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->partition_key = $reader->readString($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                if ($this->replicate_to === null) {
                    $this->replicate_to = new \Protobuf\ScalarCollection();
                }

                $this->replicate_to->add($reader->readString($stream));

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->compression = \Pulsar\Proto\CompressionType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->uncompressed_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->num_messages_in_batch = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->event_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\EncryptionKeys();

                if ($this->encryption_keys === null) {
                    $this->encryption_keys = new \Protobuf\MessageCollection();
                }

                $this->encryption_keys->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->encryption_algo = $reader->readString($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->encryption_param = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->schema_version = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 17) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->partition_key_b64_encoded = $reader->readBool($stream);

                continue;
            }

            if ($tag === 18) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->ordering_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 19) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->deliver_at_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 20) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->marker_type = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 22) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_least_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 23) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_most_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 24) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->highest_sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 25) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->null_value = $reader->readBool($stream);

                continue;
            }

            if ($tag === 26) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->uuid = $reader->readString($stream);

                continue;
            }

            if ($tag === 27) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->num_chunks_from_msg = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 28) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->total_chunk_msg_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 29) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->chunk_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 30) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->null_partition_key = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->producer_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->producer_name);
        }

        if ($this->sequence_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence_id);
        }

        if ($this->publish_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->publish_time);
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->replicated_from !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->replicated_from);
        }

        if ($this->partition_key !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->partition_key);
        }

        if ($this->replicate_to !== null) {
            foreach ($this->replicate_to as $val) {
                $size += 1;
                $size += $calculator->computeStringSize($val);
            }
        }

        if ($this->compression !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->compression->value());
        }

        if ($this->uncompressed_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->uncompressed_size);
        }

        if ($this->num_messages_in_batch !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->num_messages_in_batch);
        }

        if ($this->event_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->event_time);
        }

        if ($this->encryption_keys !== null) {
            foreach ($this->encryption_keys as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->encryption_algo !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->encryption_algo);
        }

        if ($this->encryption_param !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->encryption_param);
        }

        if ($this->schema_version !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->schema_version);
        }

        if ($this->partition_key_b64_encoded !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->ordering_key !== null) {
            $size += 2;
            $size += $calculator->computeByteStreamSize($this->ordering_key);
        }

        if ($this->deliver_at_time !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->deliver_at_time);
        }

        if ($this->marker_type !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->marker_type);
        }

        if ($this->txnid_least_bits !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->txnid_most_bits);
        }

        if ($this->highest_sequence_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->highest_sequence_id);
        }

        if ($this->null_value !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->uuid !== null) {
            $size += 2;
            $size += $calculator->computeStringSize($this->uuid);
        }

        if ($this->num_chunks_from_msg !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->num_chunks_from_msg);
        }

        if ($this->total_chunk_msg_size !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->total_chunk_msg_size);
        }

        if ($this->chunk_id !== null) {
            $size += 2;
            $size += $calculator->computeVarintSize($this->chunk_id);
        }

        if ($this->null_partition_key !== null) {
            $size += 2;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->producer_name = null;
        $this->sequence_id = null;
        $this->publish_time = null;
        $this->properties = null;
        $this->replicated_from = null;
        $this->partition_key = null;
        $this->replicate_to = null;
        $this->compression = \Pulsar\Proto\CompressionType::NONE();
        $this->uncompressed_size = '0';
        $this->num_messages_in_batch = '1';
        $this->event_time = '0';
        $this->encryption_keys = null;
        $this->encryption_algo = null;
        $this->encryption_param = null;
        $this->schema_version = null;
        $this->partition_key_b64_encoded = false;
        $this->ordering_key = null;
        $this->deliver_at_time = null;
        $this->marker_type = null;
        $this->txnid_least_bits = null;
        $this->txnid_most_bits = null;
        $this->highest_sequence_id = '0';
        $this->null_value = false;
        $this->uuid = null;
        $this->num_chunks_from_msg = null;
        $this->total_chunk_msg_size = null;
        $this->chunk_id = null;
        $this->null_partition_key = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\MessageMetadata) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->producer_name = ( $message->producer_name !== null ) ? $message->producer_name : $this->producer_name;
        $this->sequence_id = ( $message->sequence_id !== null ) ? $message->sequence_id : $this->sequence_id;
        $this->publish_time = ( $message->publish_time !== null ) ? $message->publish_time : $this->publish_time;
        $this->properties = ( $message->properties !== null ) ? $message->properties : $this->properties;
        $this->replicated_from = ( $message->replicated_from !== null ) ? $message->replicated_from : $this->replicated_from;
        $this->partition_key = ( $message->partition_key !== null ) ? $message->partition_key : $this->partition_key;
        $this->replicate_to = ( $message->replicate_to !== null ) ? $message->replicate_to : $this->replicate_to;
        $this->compression = ( $message->compression !== null ) ? $message->compression : $this->compression;
        $this->uncompressed_size = ( $message->uncompressed_size !== null ) ? $message->uncompressed_size : $this->uncompressed_size;
        $this->num_messages_in_batch = ( $message->num_messages_in_batch !== null ) ? $message->num_messages_in_batch : $this->num_messages_in_batch;
        $this->event_time = ( $message->event_time !== null ) ? $message->event_time : $this->event_time;
        $this->encryption_keys = ( $message->encryption_keys !== null ) ? $message->encryption_keys : $this->encryption_keys;
        $this->encryption_algo = ( $message->encryption_algo !== null ) ? $message->encryption_algo : $this->encryption_algo;
        $this->encryption_param = ( $message->encryption_param !== null ) ? $message->encryption_param : $this->encryption_param;
        $this->schema_version = ( $message->schema_version !== null ) ? $message->schema_version : $this->schema_version;
        $this->partition_key_b64_encoded = ( $message->partition_key_b64_encoded !== null ) ? $message->partition_key_b64_encoded : $this->partition_key_b64_encoded;
        $this->ordering_key = ( $message->ordering_key !== null ) ? $message->ordering_key : $this->ordering_key;
        $this->deliver_at_time = ( $message->deliver_at_time !== null ) ? $message->deliver_at_time : $this->deliver_at_time;
        $this->marker_type = ( $message->marker_type !== null ) ? $message->marker_type : $this->marker_type;
        $this->txnid_least_bits = ( $message->txnid_least_bits !== null ) ? $message->txnid_least_bits : $this->txnid_least_bits;
        $this->txnid_most_bits = ( $message->txnid_most_bits !== null ) ? $message->txnid_most_bits : $this->txnid_most_bits;
        $this->highest_sequence_id = ( $message->highest_sequence_id !== null ) ? $message->highest_sequence_id : $this->highest_sequence_id;
        $this->null_value = ( $message->null_value !== null ) ? $message->null_value : $this->null_value;
        $this->uuid = ( $message->uuid !== null ) ? $message->uuid : $this->uuid;
        $this->num_chunks_from_msg = ( $message->num_chunks_from_msg !== null ) ? $message->num_chunks_from_msg : $this->num_chunks_from_msg;
        $this->total_chunk_msg_size = ( $message->total_chunk_msg_size !== null ) ? $message->total_chunk_msg_size : $this->total_chunk_msg_size;
        $this->chunk_id = ( $message->chunk_id !== null ) ? $message->chunk_id : $this->chunk_id;
        $this->null_partition_key = ( $message->null_partition_key !== null ) ? $message->null_partition_key : $this->null_partition_key;
    }


}

