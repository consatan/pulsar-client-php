<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.KeySharedMeta
 */
class KeySharedMeta extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * keySharedMode required enum = 1
     *
     * @var \Pulsar\Proto\KeySharedMode
     */
    protected $keySharedMode = null;

    /**
     * hashRanges repeated message = 3
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\IntRange>
     */
    protected $hashRanges = null;

    /**
     * allowOutOfOrderDelivery optional bool = 4
     *
     * @var bool
     */
    protected $allowOutOfOrderDelivery = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->allowOutOfOrderDelivery = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'keySharedMode' has a value
     *
     * @return bool
     */
    public function hasKeySharedMode()
    {
        return $this->keySharedMode !== null;
    }

    /**
     * Get 'keySharedMode' value
     *
     * @return \Pulsar\Proto\KeySharedMode
     */
    public function getKeySharedMode()
    {
        return $this->keySharedMode;
    }

    /**
     * Set 'keySharedMode' value
     *
     * @param \Pulsar\Proto\KeySharedMode $value
     */
    public function setKeySharedMode(\Pulsar\Proto\KeySharedMode $value)
    {
        $this->keySharedMode = $value;
    }

    /**
     * Check if 'hashRanges' has a value
     *
     * @return bool
     */
    public function hasHashRangesList()
    {
        return $this->hashRanges !== null;
    }

    /**
     * Get 'hashRanges' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\IntRange>
     */
    public function getHashRangesList()
    {
        return $this->hashRanges;
    }

    /**
     * Set 'hashRanges' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\IntRange> $value
     */
    public function setHashRangesList(?\Protobuf\Collection $value = null)
    {
        $this->hashRanges = $value;
    }

    /**
     * Add a new element to 'hashRanges'
     *
     * @param \Pulsar\Proto\IntRange $value
     */
    public function addHashRanges(\Pulsar\Proto\IntRange $value)
    {
        if ($this->hashRanges === null) {
            $this->hashRanges = new \Protobuf\MessageCollection();
        }

        $this->hashRanges->add($value);
    }

    /**
     * Check if 'allowOutOfOrderDelivery' has a value
     *
     * @return bool
     */
    public function hasAllowOutOfOrderDelivery()
    {
        return $this->allowOutOfOrderDelivery !== null;
    }

    /**
     * Get 'allowOutOfOrderDelivery' value
     *
     * @return bool
     */
    public function getAllowOutOfOrderDelivery()
    {
        return $this->allowOutOfOrderDelivery;
    }

    /**
     * Set 'allowOutOfOrderDelivery' value
     *
     * @param bool $value
     */
    public function setAllowOutOfOrderDelivery($value = null)
    {
        $this->allowOutOfOrderDelivery = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['keySharedMode'])) {
            throw new \InvalidArgumentException('Field "keySharedMode" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'hashRanges'              => [],
            'allowOutOfOrderDelivery' => false,
        ], $values);

        $message->setKeySharedMode($values['keySharedMode']);
        $message->setAllowOutOfOrderDelivery($values['allowOutOfOrderDelivery']);

        foreach ($values['hashRanges'] as $item) {
            $message->addHashRanges($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'KeySharedMeta',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 1,
                    'name'      => 'keySharedMode',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.pulsar.proto.KeySharedMode',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 3,
                    'name'      => 'hashRanges',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.IntRange',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 4,
                    'name'          => 'allowOutOfOrderDelivery',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->keySharedMode === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\KeySharedMeta#keySharedMode" (tag 1) is required but has no value.');
        }

        if ($this->keySharedMode !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->keySharedMode->value());
        }

        if ($this->hashRanges !== null) {
            foreach ($this->hashRanges as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->allowOutOfOrderDelivery !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->allowOutOfOrderDelivery);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->keySharedMode = \Pulsar\Proto\KeySharedMode::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\IntRange();

                if ($this->hashRanges === null) {
                    $this->hashRanges = new \Protobuf\MessageCollection();
                }

                $this->hashRanges->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->allowOutOfOrderDelivery = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->keySharedMode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->keySharedMode->value());
        }

        if ($this->hashRanges !== null) {
            foreach ($this->hashRanges as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->allowOutOfOrderDelivery !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->keySharedMode = null;
        $this->hashRanges = null;
        $this->allowOutOfOrderDelivery = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\KeySharedMeta) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->keySharedMode = ( $message->keySharedMode !== null ) ? $message->keySharedMode : $this->keySharedMode;
        $this->hashRanges = ( $message->hashRanges !== null ) ? $message->hashRanges : $this->hashRanges;
        $this->allowOutOfOrderDelivery = ( $message->allowOutOfOrderDelivery !== null ) ? $message->allowOutOfOrderDelivery : $this->allowOutOfOrderDelivery;
    }


}

