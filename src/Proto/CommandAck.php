<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandAck
 */
class CommandAck extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * consumer_id required uint64 = 1
     *
     * @var int
     */
    protected $consumer_id = null;

    /**
     * ack_type required enum = 2
     *
     * @var \Pulsar\Proto\CommandAck\AckType
     */
    protected $ack_type = null;

    /**
     * message_id repeated message = 3
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\MessageIdData>
     */
    protected $message_id = null;

    /**
     * validation_error optional enum = 4
     *
     * @var \Pulsar\Proto\CommandAck\ValidationError
     */
    protected $validation_error = null;

    /**
     * properties repeated message = 5
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyLongValue>
     */
    protected $properties = null;

    /**
     * txnid_least_bits optional uint64 = 6
     *
     * @var int
     */
    protected $txnid_least_bits = null;

    /**
     * txnid_most_bits optional uint64 = 7
     *
     * @var int
     */
    protected $txnid_most_bits = null;

    /**
     * request_id optional uint64 = 8
     *
     * @var int
     */
    protected $request_id = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->txnid_least_bits = '0';
        $this->txnid_most_bits = '0';

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'consumer_id' has a value
     *
     * @return bool
     */
    public function hasConsumerId()
    {
        return $this->consumer_id !== null;
    }

    /**
     * Get 'consumer_id' value
     *
     * @return int
     */
    public function getConsumerId()
    {
        return $this->consumer_id;
    }

    /**
     * Set 'consumer_id' value
     *
     * @param int $value
     */
    public function setConsumerId($value)
    {
        $this->consumer_id = $value;
    }

    /**
     * Check if 'ack_type' has a value
     *
     * @return bool
     */
    public function hasAckType()
    {
        return $this->ack_type !== null;
    }

    /**
     * Get 'ack_type' value
     *
     * @return \Pulsar\Proto\CommandAck\AckType
     */
    public function getAckType()
    {
        return $this->ack_type;
    }

    /**
     * Set 'ack_type' value
     *
     * @param \Pulsar\Proto\CommandAck\AckType $value
     */
    public function setAckType(\Pulsar\Proto\CommandAck\AckType $value)
    {
        $this->ack_type = $value;
    }

    /**
     * Check if 'message_id' has a value
     *
     * @return bool
     */
    public function hasMessageIdList()
    {
        return $this->message_id !== null;
    }

    /**
     * Get 'message_id' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\MessageIdData>
     */
    public function getMessageIdList()
    {
        return $this->message_id;
    }

    /**
     * Set 'message_id' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\MessageIdData> $value
     */
    public function setMessageIdList(?\Protobuf\Collection $value = null)
    {
        $this->message_id = $value;
    }

    /**
     * Add a new element to 'message_id'
     *
     * @param \Pulsar\Proto\MessageIdData $value
     */
    public function addMessageId(\Pulsar\Proto\MessageIdData $value)
    {
        if ($this->message_id === null) {
            $this->message_id = new \Protobuf\MessageCollection();
        }

        $this->message_id->add($value);
    }

    /**
     * Check if 'validation_error' has a value
     *
     * @return bool
     */
    public function hasValidationError()
    {
        return $this->validation_error !== null;
    }

    /**
     * Get 'validation_error' value
     *
     * @return \Pulsar\Proto\CommandAck\ValidationError
     */
    public function getValidationError()
    {
        return $this->validation_error;
    }

    /**
     * Set 'validation_error' value
     *
     * @param \Pulsar\Proto\CommandAck\ValidationError $value
     */
    public function setValidationError(?\Pulsar\Proto\CommandAck\ValidationError $value = null)
    {
        $this->validation_error = $value;
    }

    /**
     * Check if 'properties' has a value
     *
     * @return bool
     */
    public function hasPropertiesList()
    {
        return $this->properties !== null;
    }

    /**
     * Get 'properties' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyLongValue>
     */
    public function getPropertiesList()
    {
        return $this->properties;
    }

    /**
     * Set 'properties' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyLongValue> $value
     */
    public function setPropertiesList(?\Protobuf\Collection $value = null)
    {
        $this->properties = $value;
    }

    /**
     * Add a new element to 'properties'
     *
     * @param \Pulsar\Proto\KeyLongValue $value
     */
    public function addProperties(\Pulsar\Proto\KeyLongValue $value)
    {
        if ($this->properties === null) {
            $this->properties = new \Protobuf\MessageCollection();
        }

        $this->properties->add($value);
    }

    /**
     * Check if 'txnid_least_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidLeastBits()
    {
        return $this->txnid_least_bits !== null;
    }

    /**
     * Get 'txnid_least_bits' value
     *
     * @return int
     */
    public function getTxnidLeastBits()
    {
        return $this->txnid_least_bits;
    }

    /**
     * Set 'txnid_least_bits' value
     *
     * @param int $value
     */
    public function setTxnidLeastBits($value = null)
    {
        $this->txnid_least_bits = $value;
    }

    /**
     * Check if 'txnid_most_bits' has a value
     *
     * @return bool
     */
    public function hasTxnidMostBits()
    {
        return $this->txnid_most_bits !== null;
    }

    /**
     * Get 'txnid_most_bits' value
     *
     * @return int
     */
    public function getTxnidMostBits()
    {
        return $this->txnid_most_bits;
    }

    /**
     * Set 'txnid_most_bits' value
     *
     * @param int $value
     */
    public function setTxnidMostBits($value = null)
    {
        $this->txnid_most_bits = $value;
    }

    /**
     * Check if 'request_id' has a value
     *
     * @return bool
     */
    public function hasRequestId()
    {
        return $this->request_id !== null;
    }

    /**
     * Get 'request_id' value
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Set 'request_id' value
     *
     * @param int $value
     */
    public function setRequestId($value = null)
    {
        $this->request_id = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['consumer_id'])) {
            throw new \InvalidArgumentException('Field "consumer_id" (tag 1) is required but has no value.');
        }

        if (!isset($values['ack_type'])) {
            throw new \InvalidArgumentException('Field "ack_type" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'message_id'       => [],
            'validation_error' => null,
            'properties'       => [],
            'txnid_least_bits' => '0',
            'txnid_most_bits'  => '0',
            'request_id'       => null,
        ], $values);

        $message->setConsumerId($values['consumer_id']);
        $message->setAckType($values['ack_type']);
        $message->setValidationError($values['validation_error']);
        $message->setTxnidLeastBits($values['txnid_least_bits']);
        $message->setTxnidMostBits($values['txnid_most_bits']);
        $message->setRequestId($values['request_id']);

        foreach ($values['message_id'] as $item) {
            $message->addMessageId($item);
        }

        foreach ($values['properties'] as $item) {
            $message->addProperties($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandAck',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'consumer_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 2,
                    'name'      => 'ack_type',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.pulsar.proto.CommandAck.AckType',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 3,
                    'name'      => 'message_id',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.MessageIdData',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 4,
                    'name'      => 'validation_error',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.CommandAck.ValidationError',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 5,
                    'name'      => 'properties',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyLongValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 6,
                    'name'          => 'txnid_least_bits',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 7,
                    'name'          => 'txnid_most_bits',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name'   => 'request_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->consumer_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandAck#consumer_id" (tag 1) is required but has no value.');
        }

        if ($this->ack_type === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandAck#ack_type" (tag 2) is required but has no value.');
        }

        if ($this->consumer_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->consumer_id);
        }

        if ($this->ack_type !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->ack_type->value());
        }

        if ($this->message_id !== null) {
            foreach ($this->message_id as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->validation_error !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->validation_error->value());
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->txnid_least_bits !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->txnid_most_bits);
        }

        if ($this->request_id !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->request_id);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->consumer_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->ack_type = \Pulsar\Proto\CommandAck\AckType::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\MessageIdData();

                if ($this->message_id === null) {
                    $this->message_id = new \Protobuf\MessageCollection();
                }

                $this->message_id->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->validation_error = \Pulsar\Proto\CommandAck\ValidationError::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyLongValue();

                if ($this->properties === null) {
                    $this->properties = new \Protobuf\MessageCollection();
                }

                $this->properties->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_least_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txnid_most_bits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->request_id = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->consumer_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->consumer_id);
        }

        if ($this->ack_type !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ack_type->value());
        }

        if ($this->message_id !== null) {
            foreach ($this->message_id as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->validation_error !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->validation_error->value());
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->txnid_least_bits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->txnid_least_bits);
        }

        if ($this->txnid_most_bits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->txnid_most_bits);
        }

        if ($this->request_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->request_id);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->consumer_id = null;
        $this->ack_type = null;
        $this->message_id = null;
        $this->validation_error = null;
        $this->properties = null;
        $this->txnid_least_bits = '0';
        $this->txnid_most_bits = '0';
        $this->request_id = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandAck) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->consumer_id = ( $message->consumer_id !== null ) ? $message->consumer_id : $this->consumer_id;
        $this->ack_type = ( $message->ack_type !== null ) ? $message->ack_type : $this->ack_type;
        $this->message_id = ( $message->message_id !== null ) ? $message->message_id : $this->message_id;
        $this->validation_error = ( $message->validation_error !== null ) ? $message->validation_error : $this->validation_error;
        $this->properties = ( $message->properties !== null ) ? $message->properties : $this->properties;
        $this->txnid_least_bits = ( $message->txnid_least_bits !== null ) ? $message->txnid_least_bits : $this->txnid_least_bits;
        $this->txnid_most_bits = ( $message->txnid_most_bits !== null ) ? $message->txnid_most_bits : $this->txnid_most_bits;
        $this->request_id = ( $message->request_id !== null ) ? $message->request_id : $this->request_id;
    }


}

