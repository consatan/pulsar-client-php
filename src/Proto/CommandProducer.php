<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandProducer
 */
class CommandProducer extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * topic required string = 1
     *
     * @var string
     */
    protected $topic = null;

    /**
     * producer_id required uint64 = 2
     *
     * @var int
     */
    protected $producer_id = null;

    /**
     * request_id required uint64 = 3
     *
     * @var int
     */
    protected $request_id = null;

    /**
     * producer_name optional string = 4
     *
     * @var string
     */
    protected $producer_name = null;

    /**
     * encrypted optional bool = 5
     *
     * @var bool
     */
    protected $encrypted = null;

    /**
     * metadata repeated message = 6
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    protected $metadata = null;

    /**
     * schema optional message = 7
     *
     * @var \Pulsar\Proto\Schema
     */
    protected $schema = null;

    /**
     * epoch optional uint64 = 8
     *
     * @var int
     */
    protected $epoch = null;

    /**
     * user_provided_producer_name optional bool = 9
     *
     * @var bool
     */
    protected $user_provided_producer_name = null;

    /**
     * producer_access_mode optional enum = 10
     *
     * @var \Pulsar\Proto\ProducerAccessMode
     */
    protected $producer_access_mode = null;

    /**
     * topic_epoch optional uint64 = 11
     *
     * @var int
     */
    protected $topic_epoch = null;

    /**
     * txn_enabled optional bool = 12
     *
     * @var bool
     */
    protected $txn_enabled = null;

    /**
     * initial_subscription_name optional string = 13
     *
     * @var string
     */
    protected $initial_subscription_name = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->encrypted = false;
        $this->epoch = '0';
        $this->user_provided_producer_name = true;
        $this->producer_access_mode = \Pulsar\Proto\ProducerAccessMode::Shared();
        $this->txn_enabled = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'topic' has a value
     *
     * @return bool
     */
    public function hasTopic()
    {
        return $this->topic !== null;
    }

    /**
     * Get 'topic' value
     *
     * @return string
     */
    public function getTopic()
    {
        return $this->topic;
    }

    /**
     * Set 'topic' value
     *
     * @param string $value
     */
    public function setTopic($value)
    {
        $this->topic = $value;
    }

    /**
     * Check if 'producer_id' has a value
     *
     * @return bool
     */
    public function hasProducerId()
    {
        return $this->producer_id !== null;
    }

    /**
     * Get 'producer_id' value
     *
     * @return int
     */
    public function getProducerId()
    {
        return $this->producer_id;
    }

    /**
     * Set 'producer_id' value
     *
     * @param int $value
     */
    public function setProducerId($value)
    {
        $this->producer_id = $value;
    }

    /**
     * Check if 'request_id' has a value
     *
     * @return bool
     */
    public function hasRequestId()
    {
        return $this->request_id !== null;
    }

    /**
     * Get 'request_id' value
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Set 'request_id' value
     *
     * @param int $value
     */
    public function setRequestId($value)
    {
        $this->request_id = $value;
    }

    /**
     * Check if 'producer_name' has a value
     *
     * @return bool
     */
    public function hasProducerName()
    {
        return $this->producer_name !== null;
    }

    /**
     * Get 'producer_name' value
     *
     * @return string
     */
    public function getProducerName()
    {
        return $this->producer_name;
    }

    /**
     * Set 'producer_name' value
     *
     * @param string $value
     */
    public function setProducerName($value = null)
    {
        $this->producer_name = $value;
    }

    /**
     * Check if 'encrypted' has a value
     *
     * @return bool
     */
    public function hasEncrypted()
    {
        return $this->encrypted !== null;
    }

    /**
     * Get 'encrypted' value
     *
     * @return bool
     */
    public function getEncrypted()
    {
        return $this->encrypted;
    }

    /**
     * Set 'encrypted' value
     *
     * @param bool $value
     */
    public function setEncrypted($value = null)
    {
        $this->encrypted = $value;
    }

    /**
     * Check if 'metadata' has a value
     *
     * @return bool
     */
    public function hasMetadataList()
    {
        return $this->metadata !== null;
    }

    /**
     * Get 'metadata' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    public function getMetadataList()
    {
        return $this->metadata;
    }

    /**
     * Set 'metadata' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyValue> $value
     */
    public function setMetadataList(?\Protobuf\Collection $value = null)
    {
        $this->metadata = $value;
    }

    /**
     * Add a new element to 'metadata'
     *
     * @param \Pulsar\Proto\KeyValue $value
     */
    public function addMetadata(\Pulsar\Proto\KeyValue $value)
    {
        if ($this->metadata === null) {
            $this->metadata = new \Protobuf\MessageCollection();
        }

        $this->metadata->add($value);
    }

    /**
     * Check if 'schema' has a value
     *
     * @return bool
     */
    public function hasSchema()
    {
        return $this->schema !== null;
    }

    /**
     * Get 'schema' value
     *
     * @return \Pulsar\Proto\Schema
     */
    public function getSchema()
    {
        return $this->schema;
    }

    /**
     * Set 'schema' value
     *
     * @param \Pulsar\Proto\Schema $value
     */
    public function setSchema(?\Pulsar\Proto\Schema $value = null)
    {
        $this->schema = $value;
    }

    /**
     * Check if 'epoch' has a value
     *
     * @return bool
     */
    public function hasEpoch()
    {
        return $this->epoch !== null;
    }

    /**
     * Get 'epoch' value
     *
     * @return int
     */
    public function getEpoch()
    {
        return $this->epoch;
    }

    /**
     * Set 'epoch' value
     *
     * @param int $value
     */
    public function setEpoch($value = null)
    {
        $this->epoch = $value;
    }

    /**
     * Check if 'user_provided_producer_name' has a value
     *
     * @return bool
     */
    public function hasUserProvidedProducerName()
    {
        return $this->user_provided_producer_name !== null;
    }

    /**
     * Get 'user_provided_producer_name' value
     *
     * @return bool
     */
    public function getUserProvidedProducerName()
    {
        return $this->user_provided_producer_name;
    }

    /**
     * Set 'user_provided_producer_name' value
     *
     * @param bool $value
     */
    public function setUserProvidedProducerName($value = null)
    {
        $this->user_provided_producer_name = $value;
    }

    /**
     * Check if 'producer_access_mode' has a value
     *
     * @return bool
     */
    public function hasProducerAccessMode()
    {
        return $this->producer_access_mode !== null;
    }

    /**
     * Get 'producer_access_mode' value
     *
     * @return \Pulsar\Proto\ProducerAccessMode
     */
    public function getProducerAccessMode()
    {
        return $this->producer_access_mode;
    }

    /**
     * Set 'producer_access_mode' value
     *
     * @param \Pulsar\Proto\ProducerAccessMode $value
     */
    public function setProducerAccessMode(?\Pulsar\Proto\ProducerAccessMode $value = null)
    {
        $this->producer_access_mode = $value;
    }

    /**
     * Check if 'topic_epoch' has a value
     *
     * @return bool
     */
    public function hasTopicEpoch()
    {
        return $this->topic_epoch !== null;
    }

    /**
     * Get 'topic_epoch' value
     *
     * @return int
     */
    public function getTopicEpoch()
    {
        return $this->topic_epoch;
    }

    /**
     * Set 'topic_epoch' value
     *
     * @param int $value
     */
    public function setTopicEpoch($value = null)
    {
        $this->topic_epoch = $value;
    }

    /**
     * Check if 'txn_enabled' has a value
     *
     * @return bool
     */
    public function hasTxnEnabled()
    {
        return $this->txn_enabled !== null;
    }

    /**
     * Get 'txn_enabled' value
     *
     * @return bool
     */
    public function getTxnEnabled()
    {
        return $this->txn_enabled;
    }

    /**
     * Set 'txn_enabled' value
     *
     * @param bool $value
     */
    public function setTxnEnabled($value = null)
    {
        $this->txn_enabled = $value;
    }

    /**
     * Check if 'initial_subscription_name' has a value
     *
     * @return bool
     */
    public function hasInitialSubscriptionName()
    {
        return $this->initial_subscription_name !== null;
    }

    /**
     * Get 'initial_subscription_name' value
     *
     * @return string
     */
    public function getInitialSubscriptionName()
    {
        return $this->initial_subscription_name;
    }

    /**
     * Set 'initial_subscription_name' value
     *
     * @param string $value
     */
    public function setInitialSubscriptionName($value = null)
    {
        $this->initial_subscription_name = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['topic'])) {
            throw new \InvalidArgumentException('Field "topic" (tag 1) is required but has no value.');
        }

        if (!isset($values['producer_id'])) {
            throw new \InvalidArgumentException('Field "producer_id" (tag 2) is required but has no value.');
        }

        if (!isset($values['request_id'])) {
            throw new \InvalidArgumentException('Field "request_id" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'producer_name'               => null,
            'encrypted'                   => false,
            'metadata'                    => [],
            'schema'                      => null,
            'epoch'                       => '0',
            'user_provided_producer_name' => true,
            'producer_access_mode'        => \Pulsar\Proto\ProducerAccessMode::Shared(),
            'topic_epoch'                 => null,
            'txn_enabled'                 => false,
            'initial_subscription_name'   => null,
        ], $values);

        $message->setTopic($values['topic']);
        $message->setProducerId($values['producer_id']);
        $message->setRequestId($values['request_id']);
        $message->setProducerName($values['producer_name']);
        $message->setEncrypted($values['encrypted']);
        $message->setSchema($values['schema']);
        $message->setEpoch($values['epoch']);
        $message->setUserProvidedProducerName($values['user_provided_producer_name']);
        $message->setProducerAccessMode($values['producer_access_mode']);
        $message->setTopicEpoch($values['topic_epoch']);
        $message->setTxnEnabled($values['txn_enabled']);
        $message->setInitialSubscriptionName($values['initial_subscription_name']);

        foreach ($values['metadata'] as $item) {
            $message->addMetadata($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandProducer',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'topic',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'producer_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name'   => 'request_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name'   => 'producer_name',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 5,
                    'name'          => 'encrypted',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 6,
                    'name'      => 'metadata',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 7,
                    'name'      => 'schema',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.Schema',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 8,
                    'name'          => 'epoch',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 9,
                    'name'          => 'user_provided_producer_name',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => true,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 10,
                    'name'          => 'producer_access_mode',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name'     => '.pulsar.proto.ProducerAccessMode',
                    'default_value' => \Pulsar\Proto\ProducerAccessMode::Shared(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name'   => 'topic_epoch',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 12,
                    'name'          => 'txn_enabled',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name'   => 'initial_subscription_name',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->topic === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandProducer#topic" (tag 1) is required but has no value.');
        }

        if ($this->producer_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandProducer#producer_id" (tag 2) is required but has no value.');
        }

        if ($this->request_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandProducer#request_id" (tag 3) is required but has no value.');
        }

        if ($this->topic !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->topic);
        }

        if ($this->producer_id !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->producer_id);
        }

        if ($this->request_id !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->request_id);
        }

        if ($this->producer_name !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->producer_name);
        }

        if ($this->encrypted !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->encrypted);
        }

        if ($this->metadata !== null) {
            foreach ($this->metadata as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->schema !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeVarint($stream, $this->schema->serializedSize($sizeContext));
            $this->schema->writeTo($context);
        }

        if ($this->epoch !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->epoch);
        }

        if ($this->user_provided_producer_name !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->user_provided_producer_name);
        }

        if ($this->producer_access_mode !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->producer_access_mode->value());
        }

        if ($this->topic_epoch !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->topic_epoch);
        }

        if ($this->txn_enabled !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeBool($stream, $this->txn_enabled);
        }

        if ($this->initial_subscription_name !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->initial_subscription_name);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->topic = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->producer_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->request_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->producer_name = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->encrypted = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyValue();

                if ($this->metadata === null) {
                    $this->metadata = new \Protobuf\MessageCollection();
                }

                $this->metadata->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\Schema();

                $this->schema = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->epoch = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->user_provided_producer_name = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->producer_access_mode = \Pulsar\Proto\ProducerAccessMode::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->topic_epoch = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->txn_enabled = $reader->readBool($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->initial_subscription_name = $reader->readString($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->topic !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->topic);
        }

        if ($this->producer_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->producer_id);
        }

        if ($this->request_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->request_id);
        }

        if ($this->producer_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->producer_name);
        }

        if ($this->encrypted !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->metadata !== null) {
            foreach ($this->metadata as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->schema !== null) {
            $innerSize = $this->schema->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->epoch !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->epoch);
        }

        if ($this->user_provided_producer_name !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->producer_access_mode !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->producer_access_mode->value());
        }

        if ($this->topic_epoch !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->topic_epoch);
        }

        if ($this->txn_enabled !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->initial_subscription_name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->initial_subscription_name);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->topic = null;
        $this->producer_id = null;
        $this->request_id = null;
        $this->producer_name = null;
        $this->encrypted = false;
        $this->metadata = null;
        $this->schema = null;
        $this->epoch = '0';
        $this->user_provided_producer_name = true;
        $this->producer_access_mode = \Pulsar\Proto\ProducerAccessMode::Shared();
        $this->topic_epoch = null;
        $this->txn_enabled = false;
        $this->initial_subscription_name = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandProducer) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->topic = ( $message->topic !== null ) ? $message->topic : $this->topic;
        $this->producer_id = ( $message->producer_id !== null ) ? $message->producer_id : $this->producer_id;
        $this->request_id = ( $message->request_id !== null ) ? $message->request_id : $this->request_id;
        $this->producer_name = ( $message->producer_name !== null ) ? $message->producer_name : $this->producer_name;
        $this->encrypted = ( $message->encrypted !== null ) ? $message->encrypted : $this->encrypted;
        $this->metadata = ( $message->metadata !== null ) ? $message->metadata : $this->metadata;
        $this->schema = ( $message->schema !== null ) ? $message->schema : $this->schema;
        $this->epoch = ( $message->epoch !== null ) ? $message->epoch : $this->epoch;
        $this->user_provided_producer_name = ( $message->user_provided_producer_name !== null ) ? $message->user_provided_producer_name : $this->user_provided_producer_name;
        $this->producer_access_mode = ( $message->producer_access_mode !== null ) ? $message->producer_access_mode : $this->producer_access_mode;
        $this->topic_epoch = ( $message->topic_epoch !== null ) ? $message->topic_epoch : $this->topic_epoch;
        $this->txn_enabled = ( $message->txn_enabled !== null ) ? $message->txn_enabled : $this->txn_enabled;
        $this->initial_subscription_name = ( $message->initial_subscription_name !== null ) ? $message->initial_subscription_name : $this->initial_subscription_name;
    }


}

