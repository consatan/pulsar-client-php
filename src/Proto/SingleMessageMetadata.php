<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.SingleMessageMetadata
 */
class SingleMessageMetadata extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * properties repeated message = 1
     *
     * @var \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    protected $properties = null;

    /**
     * partition_key optional string = 2
     *
     * @var string
     */
    protected $partition_key = null;

    /**
     * payload_size required int32 = 3
     *
     * @var int
     */
    protected $payload_size = null;

    /**
     * compacted_out optional bool = 4
     *
     * @var bool
     */
    protected $compacted_out = null;

    /**
     * event_time optional uint64 = 5
     *
     * @var int
     */
    protected $event_time = null;

    /**
     * partition_key_b64_encoded optional bool = 6
     *
     * @var bool
     */
    protected $partition_key_b64_encoded = null;

    /**
     * ordering_key optional bytes = 7
     *
     * @var \Protobuf\Stream
     */
    protected $ordering_key = null;

    /**
     * sequence_id optional uint64 = 8
     *
     * @var int
     */
    protected $sequence_id = null;

    /**
     * null_value optional bool = 9
     *
     * @var bool
     */
    protected $null_value = null;

    /**
     * null_partition_key optional bool = 10
     *
     * @var bool
     */
    protected $null_partition_key = null;

    /**
     * {@inheritdoc}
     */
    public function __construct($stream = null, ?\Protobuf\Configuration $configuration = null)
    {
        $this->compacted_out = false;
        $this->event_time = '0';
        $this->partition_key_b64_encoded = false;
        $this->null_value = false;
        $this->null_partition_key = false;

        parent::__construct($stream, $configuration);
    }

    /**
     * Check if 'properties' has a value
     *
     * @return bool
     */
    public function hasPropertiesList()
    {
        return $this->properties !== null;
    }

    /**
     * Get 'properties' value
     *
     * @return \Protobuf\Collection<\Pulsar\Proto\KeyValue>
     */
    public function getPropertiesList()
    {
        return $this->properties;
    }

    /**
     * Set 'properties' value
     *
     * @param \Protobuf\Collection<\Pulsar\Proto\KeyValue> $value
     */
    public function setPropertiesList(?\Protobuf\Collection $value = null)
    {
        $this->properties = $value;
    }

    /**
     * Add a new element to 'properties'
     *
     * @param \Pulsar\Proto\KeyValue $value
     */
    public function addProperties(\Pulsar\Proto\KeyValue $value)
    {
        if ($this->properties === null) {
            $this->properties = new \Protobuf\MessageCollection();
        }

        $this->properties->add($value);
    }

    /**
     * Check if 'partition_key' has a value
     *
     * @return bool
     */
    public function hasPartitionKey()
    {
        return $this->partition_key !== null;
    }

    /**
     * Get 'partition_key' value
     *
     * @return string
     */
    public function getPartitionKey()
    {
        return $this->partition_key;
    }

    /**
     * Set 'partition_key' value
     *
     * @param string $value
     */
    public function setPartitionKey($value = null)
    {
        $this->partition_key = $value;
    }

    /**
     * Check if 'payload_size' has a value
     *
     * @return bool
     */
    public function hasPayloadSize()
    {
        return $this->payload_size !== null;
    }

    /**
     * Get 'payload_size' value
     *
     * @return int
     */
    public function getPayloadSize()
    {
        return $this->payload_size;
    }

    /**
     * Set 'payload_size' value
     *
     * @param int $value
     */
    public function setPayloadSize($value)
    {
        $this->payload_size = $value;
    }

    /**
     * Check if 'compacted_out' has a value
     *
     * @return bool
     */
    public function hasCompactedOut()
    {
        return $this->compacted_out !== null;
    }

    /**
     * Get 'compacted_out' value
     *
     * @return bool
     */
    public function getCompactedOut()
    {
        return $this->compacted_out;
    }

    /**
     * Set 'compacted_out' value
     *
     * @param bool $value
     */
    public function setCompactedOut($value = null)
    {
        $this->compacted_out = $value;
    }

    /**
     * Check if 'event_time' has a value
     *
     * @return bool
     */
    public function hasEventTime()
    {
        return $this->event_time !== null;
    }

    /**
     * Get 'event_time' value
     *
     * @return int
     */
    public function getEventTime()
    {
        return $this->event_time;
    }

    /**
     * Set 'event_time' value
     *
     * @param int $value
     */
    public function setEventTime($value = null)
    {
        $this->event_time = $value;
    }

    /**
     * Check if 'partition_key_b64_encoded' has a value
     *
     * @return bool
     */
    public function hasPartitionKeyB64Encoded()
    {
        return $this->partition_key_b64_encoded !== null;
    }

    /**
     * Get 'partition_key_b64_encoded' value
     *
     * @return bool
     */
    public function getPartitionKeyB64Encoded()
    {
        return $this->partition_key_b64_encoded;
    }

    /**
     * Set 'partition_key_b64_encoded' value
     *
     * @param bool $value
     */
    public function setPartitionKeyB64Encoded($value = null)
    {
        $this->partition_key_b64_encoded = $value;
    }

    /**
     * Check if 'ordering_key' has a value
     *
     * @return bool
     */
    public function hasOrderingKey()
    {
        return $this->ordering_key !== null;
    }

    /**
     * Get 'ordering_key' value
     *
     * @return \Protobuf\Stream
     */
    public function getOrderingKey()
    {
        return $this->ordering_key;
    }

    /**
     * Set 'ordering_key' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setOrderingKey($value = null)
    {
        if ($value !== null && !$value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->ordering_key = $value;
    }

    /**
     * Check if 'sequence_id' has a value
     *
     * @return bool
     */
    public function hasSequenceId()
    {
        return $this->sequence_id !== null;
    }

    /**
     * Get 'sequence_id' value
     *
     * @return int
     */
    public function getSequenceId()
    {
        return $this->sequence_id;
    }

    /**
     * Set 'sequence_id' value
     *
     * @param int $value
     */
    public function setSequenceId($value = null)
    {
        $this->sequence_id = $value;
    }

    /**
     * Check if 'null_value' has a value
     *
     * @return bool
     */
    public function hasNullValue()
    {
        return $this->null_value !== null;
    }

    /**
     * Get 'null_value' value
     *
     * @return bool
     */
    public function getNullValue()
    {
        return $this->null_value;
    }

    /**
     * Set 'null_value' value
     *
     * @param bool $value
     */
    public function setNullValue($value = null)
    {
        $this->null_value = $value;
    }

    /**
     * Check if 'null_partition_key' has a value
     *
     * @return bool
     */
    public function hasNullPartitionKey()
    {
        return $this->null_partition_key !== null;
    }

    /**
     * Get 'null_partition_key' value
     *
     * @return bool
     */
    public function getNullPartitionKey()
    {
        return $this->null_partition_key;
    }

    /**
     * Set 'null_partition_key' value
     *
     * @param bool $value
     */
    public function setNullPartitionKey($value = null)
    {
        $this->null_partition_key = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['payload_size'])) {
            throw new \InvalidArgumentException('Field "payload_size" (tag 3) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'properties'                => [],
            'partition_key'             => null,
            'compacted_out'             => false,
            'event_time'                => '0',
            'partition_key_b64_encoded' => false,
            'ordering_key'              => null,
            'sequence_id'               => null,
            'null_value'                => false,
            'null_partition_key'        => false,
        ], $values);

        $message->setPartitionKey($values['partition_key']);
        $message->setPayloadSize($values['payload_size']);
        $message->setCompactedOut($values['compacted_out']);
        $message->setEventTime($values['event_time']);
        $message->setPartitionKeyB64Encoded($values['partition_key_b64_encoded']);
        $message->setOrderingKey($values['ordering_key']);
        $message->setSequenceId($values['sequence_id']);
        $message->setNullValue($values['null_value']);
        $message->setNullPartitionKey($values['null_partition_key']);

        foreach ($values['properties'] as $item) {
            $message->addProperties($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'SingleMessageMetadata',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 1,
                    'name'      => 'properties',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pulsar.proto.KeyValue',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name'   => 'partition_key',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name'   => 'payload_size',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 4,
                    'name'          => 'compacted_out',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 5,
                    'name'          => 'event_time',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => '0',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 6,
                    'name'          => 'partition_key_b64_encoded',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name'   => 'ordering_key',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name'   => 'sequence_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 9,
                    'name'          => 'null_value',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'        => 10,
                    'name'          => 'null_partition_key',
                    'type'          => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'         => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'default_value' => false,
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->payload_size === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\SingleMessageMetadata#payload_size" (tag 3) is required but has no value.');
        }

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $writer->writeVarint($stream, 10);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->partition_key !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->partition_key);
        }

        if ($this->payload_size !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->payload_size);
        }

        if ($this->compacted_out !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeBool($stream, $this->compacted_out);
        }

        if ($this->event_time !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->event_time);
        }

        if ($this->partition_key_b64_encoded !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->partition_key_b64_encoded);
        }

        if ($this->ordering_key !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeByteStream($stream, $this->ordering_key);
        }

        if ($this->sequence_id !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->sequence_id);
        }

        if ($this->null_value !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeBool($stream, $this->null_value);
        }

        if ($this->null_partition_key !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->null_partition_key);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize = $reader->readVarint($stream);
                $innerMessage = new \Pulsar\Proto\KeyValue();

                if ($this->properties === null) {
                    $this->properties = new \Protobuf\MessageCollection();
                }

                $this->properties->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->partition_key = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->payload_size = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->compacted_out = $reader->readBool($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->event_time = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->partition_key_b64_encoded = $reader->readBool($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->ordering_key = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sequence_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->null_value = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->null_partition_key = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->properties !== null) {
            foreach ($this->properties as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->partition_key !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->partition_key);
        }

        if ($this->payload_size !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->payload_size);
        }

        if ($this->compacted_out !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->event_time !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->event_time);
        }

        if ($this->partition_key_b64_encoded !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->ordering_key !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->ordering_key);
        }

        if ($this->sequence_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence_id);
        }

        if ($this->null_value !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->null_partition_key !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->properties = null;
        $this->partition_key = null;
        $this->payload_size = null;
        $this->compacted_out = false;
        $this->event_time = '0';
        $this->partition_key_b64_encoded = false;
        $this->ordering_key = null;
        $this->sequence_id = null;
        $this->null_value = false;
        $this->null_partition_key = false;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\SingleMessageMetadata) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->properties = ( $message->properties !== null ) ? $message->properties : $this->properties;
        $this->partition_key = ( $message->partition_key !== null ) ? $message->partition_key : $this->partition_key;
        $this->payload_size = ( $message->payload_size !== null ) ? $message->payload_size : $this->payload_size;
        $this->compacted_out = ( $message->compacted_out !== null ) ? $message->compacted_out : $this->compacted_out;
        $this->event_time = ( $message->event_time !== null ) ? $message->event_time : $this->event_time;
        $this->partition_key_b64_encoded = ( $message->partition_key_b64_encoded !== null ) ? $message->partition_key_b64_encoded : $this->partition_key_b64_encoded;
        $this->ordering_key = ( $message->ordering_key !== null ) ? $message->ordering_key : $this->ordering_key;
        $this->sequence_id = ( $message->sequence_id !== null ) ? $message->sequence_id : $this->sequence_id;
        $this->null_value = ( $message->null_value !== null ) ? $message->null_value : $this->null_value;
        $this->null_partition_key = ( $message->null_partition_key !== null ) ? $message->null_partition_key : $this->null_partition_key;
    }


}

