<?php
/**
 * Generated by Protobuf protoc plugin.
 * File descriptor : PulsarApi.proto
 */


namespace Pulsar\Proto;

/**
 * Protobuf message : pulsar.proto.CommandConsumerStatsResponse
 */
class CommandConsumerStatsResponse extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * request_id required uint64 = 1
     *
     * @var int
     */
    protected $request_id = null;

    /**
     * error_code optional enum = 2
     *
     * @var \Pulsar\Proto\ServerError
     */
    protected $error_code = null;

    /**
     * error_message optional string = 3
     *
     * @var string
     */
    protected $error_message = null;

    /**
     * msgRateOut optional double = 4
     *
     * @var float
     */
    protected $msgRateOut = null;

    /**
     * msgThroughputOut optional double = 5
     *
     * @var float
     */
    protected $msgThroughputOut = null;

    /**
     * msgRateRedeliver optional double = 6
     *
     * @var float
     */
    protected $msgRateRedeliver = null;

    /**
     * consumerName optional string = 7
     *
     * @var string
     */
    protected $consumerName = null;

    /**
     * availablePermits optional uint64 = 8
     *
     * @var int
     */
    protected $availablePermits = null;

    /**
     * unackedMessages optional uint64 = 9
     *
     * @var int
     */
    protected $unackedMessages = null;

    /**
     * blockedConsumerOnUnackedMsgs optional bool = 10
     *
     * @var bool
     */
    protected $blockedConsumerOnUnackedMsgs = null;

    /**
     * address optional string = 11
     *
     * @var string
     */
    protected $address = null;

    /**
     * connectedSince optional string = 12
     *
     * @var string
     */
    protected $connectedSince = null;

    /**
     * type optional string = 13
     *
     * @var string
     */
    protected $type = null;

    /**
     * msgRateExpired optional double = 14
     *
     * @var float
     */
    protected $msgRateExpired = null;

    /**
     * msgBacklog optional uint64 = 15
     *
     * @var int
     */
    protected $msgBacklog = null;

    /**
     * messageAckRate optional double = 16
     *
     * @var float
     */
    protected $messageAckRate = null;

    /**
     * Check if 'request_id' has a value
     *
     * @return bool
     */
    public function hasRequestId()
    {
        return $this->request_id !== null;
    }

    /**
     * Get 'request_id' value
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * Set 'request_id' value
     *
     * @param int $value
     */
    public function setRequestId($value)
    {
        $this->request_id = $value;
    }

    /**
     * Check if 'error_code' has a value
     *
     * @return bool
     */
    public function hasErrorCode()
    {
        return $this->error_code !== null;
    }

    /**
     * Get 'error_code' value
     *
     * @return \Pulsar\Proto\ServerError
     */
    public function getErrorCode()
    {
        return $this->error_code;
    }

    /**
     * Set 'error_code' value
     *
     * @param \Pulsar\Proto\ServerError $value
     */
    public function setErrorCode(?\Pulsar\Proto\ServerError $value = null)
    {
        $this->error_code = $value;
    }

    /**
     * Check if 'error_message' has a value
     *
     * @return bool
     */
    public function hasErrorMessage()
    {
        return $this->error_message !== null;
    }

    /**
     * Get 'error_message' value
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * Set 'error_message' value
     *
     * @param string $value
     */
    public function setErrorMessage($value = null)
    {
        $this->error_message = $value;
    }

    /**
     * Check if 'msgRateOut' has a value
     *
     * @return bool
     */
    public function hasMsgRateOut()
    {
        return $this->msgRateOut !== null;
    }

    /**
     * Get 'msgRateOut' value
     *
     * @return float
     */
    public function getMsgRateOut()
    {
        return $this->msgRateOut;
    }

    /**
     * Set 'msgRateOut' value
     *
     * @param float $value
     */
    public function setMsgRateOut($value = null)
    {
        $this->msgRateOut = $value;
    }

    /**
     * Check if 'msgThroughputOut' has a value
     *
     * @return bool
     */
    public function hasMsgThroughputOut()
    {
        return $this->msgThroughputOut !== null;
    }

    /**
     * Get 'msgThroughputOut' value
     *
     * @return float
     */
    public function getMsgThroughputOut()
    {
        return $this->msgThroughputOut;
    }

    /**
     * Set 'msgThroughputOut' value
     *
     * @param float $value
     */
    public function setMsgThroughputOut($value = null)
    {
        $this->msgThroughputOut = $value;
    }

    /**
     * Check if 'msgRateRedeliver' has a value
     *
     * @return bool
     */
    public function hasMsgRateRedeliver()
    {
        return $this->msgRateRedeliver !== null;
    }

    /**
     * Get 'msgRateRedeliver' value
     *
     * @return float
     */
    public function getMsgRateRedeliver()
    {
        return $this->msgRateRedeliver;
    }

    /**
     * Set 'msgRateRedeliver' value
     *
     * @param float $value
     */
    public function setMsgRateRedeliver($value = null)
    {
        $this->msgRateRedeliver = $value;
    }

    /**
     * Check if 'consumerName' has a value
     *
     * @return bool
     */
    public function hasConsumerName()
    {
        return $this->consumerName !== null;
    }

    /**
     * Get 'consumerName' value
     *
     * @return string
     */
    public function getConsumerName()
    {
        return $this->consumerName;
    }

    /**
     * Set 'consumerName' value
     *
     * @param string $value
     */
    public function setConsumerName($value = null)
    {
        $this->consumerName = $value;
    }

    /**
     * Check if 'availablePermits' has a value
     *
     * @return bool
     */
    public function hasAvailablePermits()
    {
        return $this->availablePermits !== null;
    }

    /**
     * Get 'availablePermits' value
     *
     * @return int
     */
    public function getAvailablePermits()
    {
        return $this->availablePermits;
    }

    /**
     * Set 'availablePermits' value
     *
     * @param int $value
     */
    public function setAvailablePermits($value = null)
    {
        $this->availablePermits = $value;
    }

    /**
     * Check if 'unackedMessages' has a value
     *
     * @return bool
     */
    public function hasUnackedMessages()
    {
        return $this->unackedMessages !== null;
    }

    /**
     * Get 'unackedMessages' value
     *
     * @return int
     */
    public function getUnackedMessages()
    {
        return $this->unackedMessages;
    }

    /**
     * Set 'unackedMessages' value
     *
     * @param int $value
     */
    public function setUnackedMessages($value = null)
    {
        $this->unackedMessages = $value;
    }

    /**
     * Check if 'blockedConsumerOnUnackedMsgs' has a value
     *
     * @return bool
     */
    public function hasBlockedConsumerOnUnackedMsgs()
    {
        return $this->blockedConsumerOnUnackedMsgs !== null;
    }

    /**
     * Get 'blockedConsumerOnUnackedMsgs' value
     *
     * @return bool
     */
    public function getBlockedConsumerOnUnackedMsgs()
    {
        return $this->blockedConsumerOnUnackedMsgs;
    }

    /**
     * Set 'blockedConsumerOnUnackedMsgs' value
     *
     * @param bool $value
     */
    public function setBlockedConsumerOnUnackedMsgs($value = null)
    {
        $this->blockedConsumerOnUnackedMsgs = $value;
    }

    /**
     * Check if 'address' has a value
     *
     * @return bool
     */
    public function hasAddress()
    {
        return $this->address !== null;
    }

    /**
     * Get 'address' value
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set 'address' value
     *
     * @param string $value
     */
    public function setAddress($value = null)
    {
        $this->address = $value;
    }

    /**
     * Check if 'connectedSince' has a value
     *
     * @return bool
     */
    public function hasConnectedSince()
    {
        return $this->connectedSince !== null;
    }

    /**
     * Get 'connectedSince' value
     *
     * @return string
     */
    public function getConnectedSince()
    {
        return $this->connectedSince;
    }

    /**
     * Set 'connectedSince' value
     *
     * @param string $value
     */
    public function setConnectedSince($value = null)
    {
        $this->connectedSince = $value;
    }

    /**
     * Check if 'type' has a value
     *
     * @return bool
     */
    public function hasType()
    {
        return $this->type !== null;
    }

    /**
     * Get 'type' value
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Set 'type' value
     *
     * @param string $value
     */
    public function setType($value = null)
    {
        $this->type = $value;
    }

    /**
     * Check if 'msgRateExpired' has a value
     *
     * @return bool
     */
    public function hasMsgRateExpired()
    {
        return $this->msgRateExpired !== null;
    }

    /**
     * Get 'msgRateExpired' value
     *
     * @return float
     */
    public function getMsgRateExpired()
    {
        return $this->msgRateExpired;
    }

    /**
     * Set 'msgRateExpired' value
     *
     * @param float $value
     */
    public function setMsgRateExpired($value = null)
    {
        $this->msgRateExpired = $value;
    }

    /**
     * Check if 'msgBacklog' has a value
     *
     * @return bool
     */
    public function hasMsgBacklog()
    {
        return $this->msgBacklog !== null;
    }

    /**
     * Get 'msgBacklog' value
     *
     * @return int
     */
    public function getMsgBacklog()
    {
        return $this->msgBacklog;
    }

    /**
     * Set 'msgBacklog' value
     *
     * @param int $value
     */
    public function setMsgBacklog($value = null)
    {
        $this->msgBacklog = $value;
    }

    /**
     * Check if 'messageAckRate' has a value
     *
     * @return bool
     */
    public function hasMessageAckRate()
    {
        return $this->messageAckRate !== null;
    }

    /**
     * Get 'messageAckRate' value
     *
     * @return float
     */
    public function getMessageAckRate()
    {
        return $this->messageAckRate;
    }

    /**
     * Set 'messageAckRate' value
     *
     * @param float $value
     */
    public function setMessageAckRate($value = null)
    {
        $this->messageAckRate = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ($this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, ?\Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if (!isset($values['request_id'])) {
            throw new \InvalidArgumentException('Field "request_id" (tag 1) is required but has no value.');
        }

        $message = new self();
        $values = array_merge([
            'error_code'                   => null,
            'error_message'                => null,
            'msgRateOut'                   => null,
            'msgThroughputOut'             => null,
            'msgRateRedeliver'             => null,
            'consumerName'                 => null,
            'availablePermits'             => null,
            'unackedMessages'              => null,
            'blockedConsumerOnUnackedMsgs' => null,
            'address'                      => null,
            'connectedSince'               => null,
            'type'                         => null,
            'msgRateExpired'               => null,
            'msgBacklog'                   => null,
            'messageAckRate'               => null,
        ], $values);

        $message->setRequestId($values['request_id']);
        $message->setErrorCode($values['error_code']);
        $message->setErrorMessage($values['error_message']);
        $message->setMsgRateOut($values['msgRateOut']);
        $message->setMsgThroughputOut($values['msgThroughputOut']);
        $message->setMsgRateRedeliver($values['msgRateRedeliver']);
        $message->setConsumerName($values['consumerName']);
        $message->setAvailablePermits($values['availablePermits']);
        $message->setUnackedMessages($values['unackedMessages']);
        $message->setBlockedConsumerOnUnackedMsgs($values['blockedConsumerOnUnackedMsgs']);
        $message->setAddress($values['address']);
        $message->setConnectedSince($values['connectedSince']);
        $message->setType($values['type']);
        $message->setMsgRateExpired($values['msgRateExpired']);
        $message->setMsgBacklog($values['msgBacklog']);
        $message->setMessageAckRate($values['messageAckRate']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'  => 'CommandConsumerStatsResponse',
            'field' => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name'   => 'request_id',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number'    => 2,
                    'name'      => 'error_code',
                    'type'      => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label'     => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.pulsar.proto.ServerError',
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name'   => 'error_message',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name'   => 'msgRateOut',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name'   => 'msgThroughputOut',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name'   => 'msgRateRedeliver',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name'   => 'consumerName',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name'   => 'availablePermits',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name'   => 'unackedMessages',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name'   => 'blockedConsumerOnUnackedMsgs',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name'   => 'address',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name'   => 'connectedSince',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 13,
                    'name'   => 'type',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 14,
                    'name'   => 'msgRateExpired',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 15,
                    'name'   => 'msgBacklog',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 16,
                    'name'   => 'messageAckRate',
                    'type'   => \google\protobuf\FieldDescriptorProto\Type::TYPE_DOUBLE(),
                    'label'  => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(?\Protobuf\Configuration $configuration = null)
    {
        $config = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream = $context->getStream();
        $writer = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->request_id === null) {
            throw new \UnexpectedValueException('Field "\\pulsar\\proto\\CommandConsumerStatsResponse#request_id" (tag 1) is required but has no value.');
        }

        if ($this->request_id !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->request_id);
        }

        if ($this->error_code !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->error_code->value());
        }

        if ($this->error_message !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->error_message);
        }

        if ($this->msgRateOut !== null) {
            $writer->writeVarint($stream, 33);
            $writer->writeDouble($stream, $this->msgRateOut);
        }

        if ($this->msgThroughputOut !== null) {
            $writer->writeVarint($stream, 41);
            $writer->writeDouble($stream, $this->msgThroughputOut);
        }

        if ($this->msgRateRedeliver !== null) {
            $writer->writeVarint($stream, 49);
            $writer->writeDouble($stream, $this->msgRateRedeliver);
        }

        if ($this->consumerName !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->consumerName);
        }

        if ($this->availablePermits !== null) {
            $writer->writeVarint($stream, 64);
            $writer->writeVarint($stream, $this->availablePermits);
        }

        if ($this->unackedMessages !== null) {
            $writer->writeVarint($stream, 72);
            $writer->writeVarint($stream, $this->unackedMessages);
        }

        if ($this->blockedConsumerOnUnackedMsgs !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeBool($stream, $this->blockedConsumerOnUnackedMsgs);
        }

        if ($this->address !== null) {
            $writer->writeVarint($stream, 90);
            $writer->writeString($stream, $this->address);
        }

        if ($this->connectedSince !== null) {
            $writer->writeVarint($stream, 98);
            $writer->writeString($stream, $this->connectedSince);
        }

        if ($this->type !== null) {
            $writer->writeVarint($stream, 106);
            $writer->writeString($stream, $this->type);
        }

        if ($this->msgRateExpired !== null) {
            $writer->writeVarint($stream, 113);
            $writer->writeDouble($stream, $this->msgRateExpired);
        }

        if ($this->msgBacklog !== null) {
            $writer->writeVarint($stream, 120);
            $writer->writeVarint($stream, $this->msgBacklog);
        }

        if ($this->messageAckRate !== null) {
            $writer->writeVarint($stream, 129);
            $writer->writeDouble($stream, $this->messageAckRate);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ( $length !== null )
            ? ( $stream->tell() + $length )
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->request_id = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->error_code = \Pulsar\Proto\ServerError::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->error_message = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->msgRateOut = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->msgThroughputOut = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->msgRateRedeliver = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->consumerName = $reader->readString($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->availablePermits = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->unackedMessages = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->blockedConsumerOnUnackedMsgs = $reader->readBool($stream);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->address = $reader->readString($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->connectedSince = $reader->readString($stream);

                continue;
            }

            if ($tag === 13) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->type = $reader->readString($stream);

                continue;
            }

            if ($tag === 14) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->msgRateExpired = $reader->readDouble($stream);

                continue;
            }

            if ($tag === 15) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->msgBacklog = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 16) {
                \Protobuf\WireFormat::assertWireType($wire, 1);

                $this->messageAckRate = $reader->readDouble($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size = 0;

        if ($this->request_id !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->request_id);
        }

        if ($this->error_code !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->error_code->value());
        }

        if ($this->error_message !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->error_message);
        }

        if ($this->msgRateOut !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->msgThroughputOut !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->msgRateRedeliver !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->consumerName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->consumerName);
        }

        if ($this->availablePermits !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->availablePermits);
        }

        if ($this->unackedMessages !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->unackedMessages);
        }

        if ($this->blockedConsumerOnUnackedMsgs !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->address !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->address);
        }

        if ($this->connectedSince !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->connectedSince);
        }

        if ($this->type !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->type);
        }

        if ($this->msgRateExpired !== null) {
            $size += 1;
            $size += 8;
        }

        if ($this->msgBacklog !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->msgBacklog);
        }

        if ($this->messageAckRate !== null) {
            $size += 2;
            $size += 8;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->request_id = null;
        $this->error_code = null;
        $this->error_message = null;
        $this->msgRateOut = null;
        $this->msgThroughputOut = null;
        $this->msgRateRedeliver = null;
        $this->consumerName = null;
        $this->availablePermits = null;
        $this->unackedMessages = null;
        $this->blockedConsumerOnUnackedMsgs = null;
        $this->address = null;
        $this->connectedSince = null;
        $this->type = null;
        $this->msgRateExpired = null;
        $this->msgBacklog = null;
        $this->messageAckRate = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if (!$message instanceof \Pulsar\Proto\CommandConsumerStatsResponse) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->request_id = ( $message->request_id !== null ) ? $message->request_id : $this->request_id;
        $this->error_code = ( $message->error_code !== null ) ? $message->error_code : $this->error_code;
        $this->error_message = ( $message->error_message !== null ) ? $message->error_message : $this->error_message;
        $this->msgRateOut = ( $message->msgRateOut !== null ) ? $message->msgRateOut : $this->msgRateOut;
        $this->msgThroughputOut = ( $message->msgThroughputOut !== null ) ? $message->msgThroughputOut : $this->msgThroughputOut;
        $this->msgRateRedeliver = ( $message->msgRateRedeliver !== null ) ? $message->msgRateRedeliver : $this->msgRateRedeliver;
        $this->consumerName = ( $message->consumerName !== null ) ? $message->consumerName : $this->consumerName;
        $this->availablePermits = ( $message->availablePermits !== null ) ? $message->availablePermits : $this->availablePermits;
        $this->unackedMessages = ( $message->unackedMessages !== null ) ? $message->unackedMessages : $this->unackedMessages;
        $this->blockedConsumerOnUnackedMsgs = ( $message->blockedConsumerOnUnackedMsgs !== null ) ? $message->blockedConsumerOnUnackedMsgs : $this->blockedConsumerOnUnackedMsgs;
        $this->address = ( $message->address !== null ) ? $message->address : $this->address;
        $this->connectedSince = ( $message->connectedSince !== null ) ? $message->connectedSince : $this->connectedSince;
        $this->type = ( $message->type !== null ) ? $message->type : $this->type;
        $this->msgRateExpired = ( $message->msgRateExpired !== null ) ? $message->msgRateExpired : $this->msgRateExpired;
        $this->msgBacklog = ( $message->msgBacklog !== null ) ? $message->msgBacklog : $this->msgBacklog;
        $this->messageAckRate = ( $message->messageAckRate !== null ) ? $message->messageAckRate : $this->messageAckRate;
    }


}

